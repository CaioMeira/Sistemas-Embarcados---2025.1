/* Generated by itemis CREATE code generator. */

#include "Statechart.h"

/*! \file
Implementation of the state machine 'Statechart'
*/




Statechart::Statechart() :
	low(0),
	high(1),
	led_init_pin(2),
	baud_rate(115200),
	init_time(4000),
	procedure1_time(3000),
	procedure2_time(3000),
	procedure3_time(3000),
	Start_Init_raised(false),
	Total_Reset_raised(false),
	Start_Config_raised(false),
	Save_Config_raised(false),
	Start_Operation_raised(false),
	Reset_raised(false),
	timerService(sc_null),
	ifaceOperationCallback(sc_null),
	completed(false),
	doCompletion(false),
	isExecuting(false)
{
	for (sc_ushort state_vec_pos = 0; state_vec_pos < maxOrthogonalStates; ++state_vec_pos)
		stateConfVector[state_vec_pos] = Statechart_last_state;
	
	clearInEvents();
}

Statechart::~Statechart()
{
	while (!inEventQueue.empty()) {
		statechart_events::SctEvent* nextEvent = inEventQueue.front();
		inEventQueue.pop_front();
		delete nextEvent;
	}
}


using namespace statechart_events;

SctEvent* Statechart::getNextEvent()
{
	SctEvent* nextEvent = 0;
	
	if(!inEventQueue.empty()) {
		nextEvent = inEventQueue.front();
		inEventQueue.pop_front();
	}
	
	return nextEvent;
}

sc_boolean Statechart::dispatch_event(SctEvent * event)
{
	if(event == 0) {
		return false;
	}
	switch(event->name)
	{
		case Start_Init:
		case Total_Reset:
		case Start_Config:
		case Save_Config:
		case Start_Operation:
		case Reset:
		{
			return iface_dispatch_event(event);
		}
		case Statechart_main_region_StateInit_Initialization_Progress_Start_init_time_event_0:
		{
			delete event;
			return timeEvents[0] = true;
		}
		case Statechart_main_region_StateOperation_Operation_running_StateProcedure_1_time_event_0:
		{
			delete event;
			return timeEvents[1] = true;
		}
		case Statechart_main_region_StateOperation_Operation_running_StateProcedure_2_time_event_0:
		{
			delete event;
			return timeEvents[2] = true;
		}
		case Statechart_main_region_StateOperation_Operation_running_StateProcedure_3_time_event_0:
		{
			delete event;
			return timeEvents[3] = true;
		}
		default:
			delete event;
			return false;
	}
}

sc_boolean Statechart::internal_dispatch_event(SctEvent * event)
{
	switch(event->name)
	{
		default:
			delete event;
			return false;
	}
	delete event;
	return true;
}
sc_boolean Statechart::iface_dispatch_event(SctEvent * event)
{
	switch(event->name)
	{
		case Start_Init:
		{
			internal_raiseStart_Init();
			break;
		}
		case Total_Reset:
		{
			internal_raiseTotal_Reset();
			break;
		}
		case Start_Config:
		{
			internal_raiseStart_Config();
			break;
		}
		case Save_Config:
		{
			internal_raiseSave_Config();
			break;
		}
		case Start_Operation:
		{
			internal_raiseStart_Operation();
			break;
		}
		case Reset:
		{
			internal_raiseReset();
			break;
		}
		default:
			delete event;
			return false;
	}
	delete event;
	return true;
}

StatechartEventName Statechart::getTimedEventName(sc_eventid evid)
{
	if (evid == (sc_eventid)(&timeEvents[0])) {
		return Statechart_main_region_StateInit_Initialization_Progress_Start_init_time_event_0;
	}
	if (evid == (sc_eventid)(&timeEvents[1])) {
		return Statechart_main_region_StateOperation_Operation_running_StateProcedure_1_time_event_0;
	}
	if (evid == (sc_eventid)(&timeEvents[2])) {
		return Statechart_main_region_StateOperation_Operation_running_StateProcedure_2_time_event_0;
	}
	if (evid == (sc_eventid)(&timeEvents[3])) {
		return Statechart_main_region_StateOperation_Operation_running_StateProcedure_3_time_event_0;
	}
	return invalid_event;
}



sc_boolean Statechart::isActive() const
{
	return stateConfVector[0] != Statechart_last_state;
}

/* 
 * Always returns 'false' since this state machine can never become final.
 */
sc_boolean Statechart::isFinal() const
{
	   return false;
}

sc_boolean Statechart::check(){
	if(timerService == sc_null) {
		return false;
	}
	if (this->ifaceOperationCallback == sc_null) {
		return false;
	}
	return true;
}


void Statechart::setTimerService(sc::timer::TimerServiceInterface* timerService_)
{
	this->timerService = timerService_;
}

sc::timer::TimerServiceInterface* Statechart::getTimerService()
{
	return timerService;
}

sc_integer Statechart::getNumberOfParallelTimeEvents() {
	return parallelTimeEventsCount;
}

void Statechart::raiseTimeEvent(sc_eventid evid)
{
	if ((evid >= (sc_eventid)timeEvents) && (evid < (sc_eventid)(&timeEvents[timeEventsCount])))
	{
		inEventQueue.push_back(new TimedSctEvent(getTimedEventName(evid)));
		runCycle();
	}
}


sc_boolean Statechart::isStateActive(StatechartStates state) const
{
	switch (state)
	{
		case main_region_StateZero :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_STATEZERO] == main_region_StateZero);
			break;
		}
		case main_region_StateInit :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_STATEINIT] >= main_region_StateInit && stateConfVector[SCVI_MAIN_REGION_STATEINIT] <= main_region_StateInit_Initialization_Progress_End_init);
			break;
		}
		case main_region_StateInit_Initialization_Progress_Start_init :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_STATEINIT_INITIALIZATION_PROGRESS_START_INIT] == main_region_StateInit_Initialization_Progress_Start_init);
			break;
		}
		case main_region_StateInit_Initialization_Progress_End_init :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_STATEINIT_INITIALIZATION_PROGRESS_END_INIT] == main_region_StateInit_Initialization_Progress_End_init);
			break;
		}
		case main_region_StateIdle :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_STATEIDLE] == main_region_StateIdle);
			break;
		}
		case main_region_StateConfig :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_STATECONFIG] == main_region_StateConfig);
			break;
		}
		case main_region_StateOperation :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_STATEOPERATION] >= main_region_StateOperation && stateConfVector[SCVI_MAIN_REGION_STATEOPERATION] <= main_region_StateOperation_Operation_running_StateProcedure_3);
			break;
		}
		case main_region_StateOperation_Operation_running_StateProcedure_1 :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_STATEOPERATION_OPERATION_RUNNING_STATEPROCEDURE_1] == main_region_StateOperation_Operation_running_StateProcedure_1);
			break;
		}
		case main_region_StateOperation_Operation_running_StateProcedure_2 :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_STATEOPERATION_OPERATION_RUNNING_STATEPROCEDURE_2] == main_region_StateOperation_Operation_running_StateProcedure_2);
			break;
		}
		case main_region_StateOperation_Operation_running_StateProcedure_3 :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_STATEOPERATION_OPERATION_RUNNING_STATEPROCEDURE_3] == main_region_StateOperation_Operation_running_StateProcedure_3);
			break;
		}
		case main_region_StateComplete :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_STATECOMPLETE] == main_region_StateComplete);
			break;
		}
		default:
		{
			/* State is not active*/
			return false;
			break;
		}
	}
}

void Statechart::setLow(sc_integer low_)
{
	this->low = low_;
}
void Statechart::setHigh(sc_integer high_)
{
	this->high = high_;
}
void Statechart::setLed_init_pin(sc_integer led_init_pin_)
{
	this->led_init_pin = led_init_pin_;
}
void Statechart::setBaud_rate(sc_integer baud_rate_)
{
	this->baud_rate = baud_rate_;
}
/* Functions for event Start_Init in interface  */
void Statechart::raiseStart_Init()
{
	inEventQueue.push_back(new SctEvent__Start_Init(Start_Init));
        runCycle();
}
void Statechart::internal_raiseStart_Init()
{
	Start_Init_raised = true;
}
/* Functions for event Total_Reset in interface  */
void Statechart::raiseTotal_Reset()
{
	inEventQueue.push_back(new SctEvent__Total_Reset(Total_Reset));
        runCycle();
}
void Statechart::internal_raiseTotal_Reset()
{
	Total_Reset_raised = true;
}
/* Functions for event Start_Config in interface  */
void Statechart::raiseStart_Config()
{
	inEventQueue.push_back(new SctEvent__Start_Config(Start_Config));
        runCycle();
}
void Statechart::internal_raiseStart_Config()
{
	Start_Config_raised = true;
}
/* Functions for event Save_Config in interface  */
void Statechart::raiseSave_Config()
{
	inEventQueue.push_back(new SctEvent__Save_Config(Save_Config));
        runCycle();
}
void Statechart::internal_raiseSave_Config()
{
	Save_Config_raised = true;
}
/* Functions for event Start_Operation in interface  */
void Statechart::raiseStart_Operation()
{
	inEventQueue.push_back(new SctEvent__Start_Operation(Start_Operation));
        runCycle();
}
void Statechart::internal_raiseStart_Operation()
{
	Start_Operation_raised = true;
}
/* Functions for event Reset in interface  */
void Statechart::raiseReset()
{
	inEventQueue.push_back(new SctEvent__Reset(Reset));
        runCycle();
}
void Statechart::internal_raiseReset()
{
	Reset_raised = true;
}
sc_integer Statechart::getInit_time() const
{
	return init_time
	;
}

void Statechart::setInit_time(sc_integer init_time_)
{
	this->init_time = init_time_;
}
sc_integer Statechart::getProcedure1_time() const
{
	return procedure1_time
	;
}

void Statechart::setProcedure1_time(sc_integer procedure1_time_)
{
	this->procedure1_time = procedure1_time_;
}
sc_integer Statechart::getProcedure2_time() const
{
	return procedure2_time
	;
}

void Statechart::setProcedure2_time(sc_integer procedure2_time_)
{
	this->procedure2_time = procedure2_time_;
}
sc_integer Statechart::getProcedure3_time() const
{
	return procedure3_time
	;
}

void Statechart::setProcedure3_time(sc_integer procedure3_time_)
{
	this->procedure3_time = procedure3_time_;
}
void Statechart::setOperationCallback(OperationCallback* operationCallback)
{
	ifaceOperationCallback = operationCallback;
}

// implementations of all internal functions
/* Entry action for state 'Start_init'. */
void Statechart::enact_main_region_StateInit_Initialization_Progress_Start_init()
{
	/* Entry action for state 'Start_init'. */
	timerService->setTimer(this, (sc_eventid)(&timeEvents[0]), ((sc_time) init_time), false);
	ifaceOperationCallback->ESP_digitalWrite(led_init_pin, low);
	ifaceOperationCallback->ESP_UartStart(baud_rate);
}

void Statechart::enact_main_region_StateInit_Initialization_Progress_End_init()
{
	completed = true;
}

/* Entry action for state 'StateIdle'. */
void Statechart::enact_main_region_StateIdle()
{
	/* Entry action for state 'StateIdle'. */
	ifaceOperationCallback->ESP_UartRead();
}

/* Entry action for state 'StateConfig'. */
void Statechart::enact_main_region_StateConfig()
{
	/* Entry action for state 'StateConfig'. */
	ifaceOperationCallback->ESP_UartRead();
}

/* Entry action for state 'StateProcedure_1'. */
void Statechart::enact_main_region_StateOperation_Operation_running_StateProcedure_1()
{
	/* Entry action for state 'StateProcedure_1'. */
	timerService->setTimer(this, (sc_eventid)(&timeEvents[1]), ((sc_time) procedure1_time), false);
	ifaceOperationCallback->ESP_UartRead();
}

/* Entry action for state 'StateProcedure_2'. */
void Statechart::enact_main_region_StateOperation_Operation_running_StateProcedure_2()
{
	/* Entry action for state 'StateProcedure_2'. */
	timerService->setTimer(this, (sc_eventid)(&timeEvents[2]), ((sc_time) procedure2_time), false);
	ifaceOperationCallback->ESP_UartRead();
}

/* Entry action for state 'StateProcedure_3'. */
void Statechart::enact_main_region_StateOperation_Operation_running_StateProcedure_3()
{
	/* Entry action for state 'StateProcedure_3'. */
	timerService->setTimer(this, (sc_eventid)(&timeEvents[3]), ((sc_time) procedure3_time), false);
	ifaceOperationCallback->ESP_UartRead();
}

/* Entry action for state 'StateComplete'. */
void Statechart::enact_main_region_StateComplete()
{
	/* Entry action for state 'StateComplete'. */
	ifaceOperationCallback->ESP_UartRead();
}

/* Exit action for state 'Start_init'. */
void Statechart::exact_main_region_StateInit_Initialization_Progress_Start_init()
{
	/* Exit action for state 'Start_init'. */
	timerService->unsetTimer(this, (sc_eventid)(&timeEvents[0]));
}

/* Exit action for state 'End_init'. */
void Statechart::exact_main_region_StateInit_Initialization_Progress_End_init()
{
	/* Exit action for state 'End_init'. */
	ifaceOperationCallback->ESP_digitalWrite(led_init_pin, high);
}

/* Exit action for state 'StateProcedure_1'. */
void Statechart::exact_main_region_StateOperation_Operation_running_StateProcedure_1()
{
	/* Exit action for state 'StateProcedure_1'. */
	timerService->unsetTimer(this, (sc_eventid)(&timeEvents[1]));
}

/* Exit action for state 'StateProcedure_2'. */
void Statechart::exact_main_region_StateOperation_Operation_running_StateProcedure_2()
{
	/* Exit action for state 'StateProcedure_2'. */
	timerService->unsetTimer(this, (sc_eventid)(&timeEvents[2]));
}

/* Exit action for state 'StateProcedure_3'. */
void Statechart::exact_main_region_StateOperation_Operation_running_StateProcedure_3()
{
	/* Exit action for state 'StateProcedure_3'. */
	timerService->unsetTimer(this, (sc_eventid)(&timeEvents[3]));
}

/* 'default' enter sequence for state StateZero */
void Statechart::enseq_main_region_StateZero_default()
{
	/* 'default' enter sequence for state StateZero */
	stateConfVector[0] = main_region_StateZero;
}

/* 'default' enter sequence for state StateInit */
void Statechart::enseq_main_region_StateInit_default()
{
	/* 'default' enter sequence for state StateInit */
	enseq_main_region_StateInit_Initialization_Progress_default();
}

/* 'default' enter sequence for state Start_init */
void Statechart::enseq_main_region_StateInit_Initialization_Progress_Start_init_default()
{
	/* 'default' enter sequence for state Start_init */
	enact_main_region_StateInit_Initialization_Progress_Start_init();
	stateConfVector[0] = main_region_StateInit_Initialization_Progress_Start_init;
}

/* 'default' enter sequence for state End_init */
void Statechart::enseq_main_region_StateInit_Initialization_Progress_End_init_default()
{
	/* 'default' enter sequence for state End_init */
	enact_main_region_StateInit_Initialization_Progress_End_init();
	stateConfVector[0] = main_region_StateInit_Initialization_Progress_End_init;
}

/* 'default' enter sequence for state StateIdle */
void Statechart::enseq_main_region_StateIdle_default()
{
	/* 'default' enter sequence for state StateIdle */
	enact_main_region_StateIdle();
	stateConfVector[0] = main_region_StateIdle;
}

/* 'default' enter sequence for state StateConfig */
void Statechart::enseq_main_region_StateConfig_default()
{
	/* 'default' enter sequence for state StateConfig */
	enact_main_region_StateConfig();
	stateConfVector[0] = main_region_StateConfig;
}

/* 'default' enter sequence for state StateOperation */
void Statechart::enseq_main_region_StateOperation_default()
{
	/* 'default' enter sequence for state StateOperation */
	enseq_main_region_StateOperation_Operation_running_default();
}

/* 'default' enter sequence for state StateProcedure_1 */
void Statechart::enseq_main_region_StateOperation_Operation_running_StateProcedure_1_default()
{
	/* 'default' enter sequence for state StateProcedure_1 */
	enact_main_region_StateOperation_Operation_running_StateProcedure_1();
	stateConfVector[0] = main_region_StateOperation_Operation_running_StateProcedure_1;
}

/* 'default' enter sequence for state StateProcedure_2 */
void Statechart::enseq_main_region_StateOperation_Operation_running_StateProcedure_2_default()
{
	/* 'default' enter sequence for state StateProcedure_2 */
	enact_main_region_StateOperation_Operation_running_StateProcedure_2();
	stateConfVector[0] = main_region_StateOperation_Operation_running_StateProcedure_2;
}

/* 'default' enter sequence for state StateProcedure_3 */
void Statechart::enseq_main_region_StateOperation_Operation_running_StateProcedure_3_default()
{
	/* 'default' enter sequence for state StateProcedure_3 */
	enact_main_region_StateOperation_Operation_running_StateProcedure_3();
	stateConfVector[0] = main_region_StateOperation_Operation_running_StateProcedure_3;
}

/* 'default' enter sequence for state StateComplete */
void Statechart::enseq_main_region_StateComplete_default()
{
	/* 'default' enter sequence for state StateComplete */
	enact_main_region_StateComplete();
	stateConfVector[0] = main_region_StateComplete;
}

/* 'default' enter sequence for region main region */
void Statechart::enseq_main_region_default()
{
	/* 'default' enter sequence for region main region */
	react_main_region__entry_Default();
}

/* 'default' enter sequence for region Initialization Progress */
void Statechart::enseq_main_region_StateInit_Initialization_Progress_default()
{
	/* 'default' enter sequence for region Initialization Progress */
	react_main_region_StateInit_Initialization_Progress__entry_Default();
}

/* 'default' enter sequence for region Operation running */
void Statechart::enseq_main_region_StateOperation_Operation_running_default()
{
	/* 'default' enter sequence for region Operation running */
	react_main_region_StateOperation_Operation_running__entry_Default();
}

/* Default exit sequence for state StateZero */
void Statechart::exseq_main_region_StateZero()
{
	/* Default exit sequence for state StateZero */
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for state StateInit */
void Statechart::exseq_main_region_StateInit()
{
	/* Default exit sequence for state StateInit */
	exseq_main_region_StateInit_Initialization_Progress();
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for state Start_init */
void Statechart::exseq_main_region_StateInit_Initialization_Progress_Start_init()
{
	/* Default exit sequence for state Start_init */
	stateConfVector[0] = main_region_StateInit;
	exact_main_region_StateInit_Initialization_Progress_Start_init();
}

/* Default exit sequence for state End_init */
void Statechart::exseq_main_region_StateInit_Initialization_Progress_End_init()
{
	/* Default exit sequence for state End_init */
	stateConfVector[0] = main_region_StateInit;
	exact_main_region_StateInit_Initialization_Progress_End_init();
}

/* Default exit sequence for state StateIdle */
void Statechart::exseq_main_region_StateIdle()
{
	/* Default exit sequence for state StateIdle */
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for state StateConfig */
void Statechart::exseq_main_region_StateConfig()
{
	/* Default exit sequence for state StateConfig */
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for state StateOperation */
void Statechart::exseq_main_region_StateOperation()
{
	/* Default exit sequence for state StateOperation */
	exseq_main_region_StateOperation_Operation_running();
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for state StateProcedure_1 */
void Statechart::exseq_main_region_StateOperation_Operation_running_StateProcedure_1()
{
	/* Default exit sequence for state StateProcedure_1 */
	stateConfVector[0] = main_region_StateOperation;
	exact_main_region_StateOperation_Operation_running_StateProcedure_1();
}

/* Default exit sequence for state StateProcedure_2 */
void Statechart::exseq_main_region_StateOperation_Operation_running_StateProcedure_2()
{
	/* Default exit sequence for state StateProcedure_2 */
	stateConfVector[0] = main_region_StateOperation;
	exact_main_region_StateOperation_Operation_running_StateProcedure_2();
}

/* Default exit sequence for state StateProcedure_3 */
void Statechart::exseq_main_region_StateOperation_Operation_running_StateProcedure_3()
{
	/* Default exit sequence for state StateProcedure_3 */
	stateConfVector[0] = main_region_StateOperation;
	exact_main_region_StateOperation_Operation_running_StateProcedure_3();
}

/* Default exit sequence for state StateComplete */
void Statechart::exseq_main_region_StateComplete()
{
	/* Default exit sequence for state StateComplete */
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for region main region */
void Statechart::exseq_main_region()
{
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of Statechart.main_region) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_StateZero :
		{
			exseq_main_region_StateZero();
			break;
		}
		case main_region_StateInit :
		{
			exseq_main_region_StateInit();
			break;
		}
		case main_region_StateInit_Initialization_Progress_Start_init :
		{
			exseq_main_region_StateInit_Initialization_Progress_Start_init();
			break;
		}
		case main_region_StateInit_Initialization_Progress_End_init :
		{
			exseq_main_region_StateInit_Initialization_Progress_End_init();
			break;
		}
		case main_region_StateIdle :
		{
			exseq_main_region_StateIdle();
			break;
		}
		case main_region_StateConfig :
		{
			exseq_main_region_StateConfig();
			break;
		}
		case main_region_StateOperation :
		{
			exseq_main_region_StateOperation();
			break;
		}
		case main_region_StateOperation_Operation_running_StateProcedure_1 :
		{
			exseq_main_region_StateOperation_Operation_running_StateProcedure_1();
			break;
		}
		case main_region_StateOperation_Operation_running_StateProcedure_2 :
		{
			exseq_main_region_StateOperation_Operation_running_StateProcedure_2();
			break;
		}
		case main_region_StateOperation_Operation_running_StateProcedure_3 :
		{
			exseq_main_region_StateOperation_Operation_running_StateProcedure_3();
			break;
		}
		case main_region_StateComplete :
		{
			exseq_main_region_StateComplete();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region Initialization Progress */
void Statechart::exseq_main_region_StateInit_Initialization_Progress()
{
	/* Default exit sequence for region Initialization Progress */
	/* Handle exit of all possible states (of Statechart.main_region.StateInit.Initialization_Progress) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_StateInit_Initialization_Progress_Start_init :
		{
			exseq_main_region_StateInit_Initialization_Progress_Start_init();
			break;
		}
		case main_region_StateInit_Initialization_Progress_End_init :
		{
			exseq_main_region_StateInit_Initialization_Progress_End_init();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region Operation running */
void Statechart::exseq_main_region_StateOperation_Operation_running()
{
	/* Default exit sequence for region Operation running */
	/* Handle exit of all possible states (of Statechart.main_region.StateOperation.Operation_running) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_StateOperation_Operation_running_StateProcedure_1 :
		{
			exseq_main_region_StateOperation_Operation_running_StateProcedure_1();
			break;
		}
		case main_region_StateOperation_Operation_running_StateProcedure_2 :
		{
			exseq_main_region_StateOperation_Operation_running_StateProcedure_2();
			break;
		}
		case main_region_StateOperation_Operation_running_StateProcedure_3 :
		{
			exseq_main_region_StateOperation_Operation_running_StateProcedure_3();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default react sequence for initial entry  */
void Statechart::react_main_region__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_main_region_StateZero_default();
}

/* Default react sequence for initial entry  */
void Statechart::react_main_region_StateInit_Initialization_Progress__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_main_region_StateInit_Initialization_Progress_Start_init_default();
}

/* Default react sequence for initial entry  */
void Statechart::react_main_region_StateOperation_Operation_running__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_main_region_StateOperation_Operation_running_StateProcedure_1_default();
}

sc_integer Statechart::main_region_StateZero_react(const sc_integer transitioned_before) {
	/* The reactions of state StateZero. */
	sc_integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (Start_Init_raised)
			{ 
				exseq_main_region_StateZero();
				enseq_main_region_StateInit_default();
				transitioned_after = 0;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		} 
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_StateInit_react(const sc_integer transitioned_before) {
	/* The reactions of state StateInit. */
	sc_integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (Total_Reset_raised)
			{ 
				exseq_main_region_StateInit();
				enseq_main_region_StateZero_default();
				transitioned_after = 0;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		} 
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_StateInit_Initialization_Progress_Start_init_react(const sc_integer transitioned_before) {
	/* The reactions of state Start_init. */
	sc_integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (timeEvents[0])
			{ 
				exseq_main_region_StateInit_Initialization_Progress_Start_init();
				timeEvents[0] = false;
				enseq_main_region_StateInit_Initialization_Progress_End_init_default();
				main_region_StateInit_react(0);
				transitioned_after = 0;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = main_region_StateInit_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_StateInit_Initialization_Progress_End_init_react(const sc_integer transitioned_before) {
	/* The reactions of state End_init. */
	sc_integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state StateInit */
		exseq_main_region_StateInit_Initialization_Progress();
		stateConfVector[0] = Statechart_last_state;
		/* 'default' enter sequence for state StateIdle */
		enact_main_region_StateIdle();
		stateConfVector[0] = main_region_StateIdle;
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = main_region_StateInit_react(transitioned_before);
	}
	return transitioned_after;
}

sc_integer Statechart::main_region_StateIdle_react(const sc_integer transitioned_before) {
	/* The reactions of state StateIdle. */
	sc_integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (Total_Reset_raised)
			{ 
				exseq_main_region_StateIdle();
				enseq_main_region_StateZero_default();
				transitioned_after = 0;
			}  else
			{
				if (Start_Config_raised)
				{ 
					exseq_main_region_StateIdle();
					enseq_main_region_StateConfig_default();
					transitioned_after = 0;
				}  else
				{
					if (Start_Operation_raised)
					{ 
						exseq_main_region_StateIdle();
						enseq_main_region_StateOperation_default();
						transitioned_after = 0;
					} 
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		} 
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_StateConfig_react(const sc_integer transitioned_before) {
	/* The reactions of state StateConfig. */
	sc_integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (Save_Config_raised)
			{ 
				exseq_main_region_StateConfig();
				enseq_main_region_StateIdle_default();
				transitioned_after = 0;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		} 
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_StateOperation_react(const sc_integer transitioned_before) {
	/* The reactions of state StateOperation. */
	sc_integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (Reset_raised)
			{ 
				exseq_main_region_StateOperation();
				enseq_main_region_StateIdle_default();
				transitioned_after = 0;
			}  else
			{
				if (Total_Reset_raised)
				{ 
					exseq_main_region_StateOperation();
					enseq_main_region_StateZero_default();
					transitioned_after = 0;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		} 
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_StateOperation_Operation_running_StateProcedure_1_react(const sc_integer transitioned_before) {
	/* The reactions of state StateProcedure_1. */
	sc_integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (timeEvents[1])
			{ 
				exseq_main_region_StateOperation_Operation_running_StateProcedure_1();
				timeEvents[1] = false;
				enseq_main_region_StateOperation_Operation_running_StateProcedure_2_default();
				main_region_StateOperation_react(0);
				transitioned_after = 0;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = main_region_StateOperation_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_StateOperation_Operation_running_StateProcedure_2_react(const sc_integer transitioned_before) {
	/* The reactions of state StateProcedure_2. */
	sc_integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (timeEvents[2])
			{ 
				exseq_main_region_StateOperation_Operation_running_StateProcedure_2();
				timeEvents[2] = false;
				enseq_main_region_StateOperation_Operation_running_StateProcedure_3_default();
				main_region_StateOperation_react(0);
				transitioned_after = 0;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = main_region_StateOperation_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_StateOperation_Operation_running_StateProcedure_3_react(const sc_integer transitioned_before) {
	/* The reactions of state StateProcedure_3. */
	sc_integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (timeEvents[3])
			{ 
				exseq_main_region_StateOperation();
				timeEvents[3] = false;
				enseq_main_region_StateComplete_default();
				transitioned_after = 0;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = main_region_StateOperation_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_StateComplete_react(const sc_integer transitioned_before) {
	/* The reactions of state StateComplete. */
	sc_integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (Reset_raised)
			{ 
				exseq_main_region_StateComplete();
				enseq_main_region_StateIdle_default();
				transitioned_after = 0;
			}  else
			{
				if (Total_Reset_raised)
				{ 
					exseq_main_region_StateComplete();
					enseq_main_region_StateZero_default();
					transitioned_after = 0;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		} 
	} 
	return transitioned_after;
}

void Statechart::clearInEvents() {
	Start_Init_raised = false;
	Total_Reset_raised = false;
	Start_Config_raised = false;
	Save_Config_raised = false;
	Start_Operation_raised = false;
	Reset_raised = false;
	timeEvents[0] = false;
	timeEvents[1] = false;
	timeEvents[2] = false;
	timeEvents[3] = false;
}

void Statechart::microStep() {
	switch(stateConfVector[ 0 ])
	{
		case main_region_StateZero :
		{
			main_region_StateZero_react(-1);
			break;
		}
		case main_region_StateInit_Initialization_Progress_Start_init :
		{
			main_region_StateInit_Initialization_Progress_Start_init_react(-1);
			break;
		}
		case main_region_StateInit_Initialization_Progress_End_init :
		{
			main_region_StateInit_Initialization_Progress_End_init_react(-1);
			break;
		}
		case main_region_StateIdle :
		{
			main_region_StateIdle_react(-1);
			break;
		}
		case main_region_StateConfig :
		{
			main_region_StateConfig_react(-1);
			break;
		}
		case main_region_StateOperation_Operation_running_StateProcedure_1 :
		{
			main_region_StateOperation_Operation_running_StateProcedure_1_react(-1);
			break;
		}
		case main_region_StateOperation_Operation_running_StateProcedure_2 :
		{
			main_region_StateOperation_Operation_running_StateProcedure_2_react(-1);
			break;
		}
		case main_region_StateOperation_Operation_running_StateProcedure_3 :
		{
			main_region_StateOperation_Operation_running_StateProcedure_3_react(-1);
			break;
		}
		case main_region_StateComplete :
		{
			main_region_StateComplete_react(-1);
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

void Statechart::runCycle() {
	/* Performs a 'run to completion' step. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	dispatch_event(getNextEvent());
	do
	{ 
		doCompletion = false;
		do
		{ 
			if (completed)
			{ 
				doCompletion = true;
			} 
			completed = false;
			microStep();
			clearInEvents();
			doCompletion = false;
		} while (completed);
	} while (dispatch_event(getNextEvent()));
	isExecuting = false;
}

void Statechart::enter() {
	/* Activates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default enter sequence for statechart Statechart */
	enseq_main_region_default();
	doCompletion = false;
	do
	{ 
		if (completed)
		{ 
			doCompletion = true;
		} 
		completed = false;
		microStep();
		clearInEvents();
		doCompletion = false;
	} while (completed);
	isExecuting = false;
}

void Statechart::exit() {
	/* Deactivates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default exit sequence for statechart Statechart */
	exseq_main_region();
	stateConfVector[0] = Statechart_last_state;
	isExecuting = false;
}

/* Can be used by the client code to trigger a run to completion step without raising an event. */
void Statechart::triggerWithoutEvent() {
	runCycle();
}


