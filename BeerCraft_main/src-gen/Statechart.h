/* Generated by itemis CREATE code generator. */

#ifndef STATECHART_H_
#define STATECHART_H_

/*!
Forward declaration for the Statechart state machine.
*/
class Statechart;


#include <deque>
#include "../src/sc_types.h"
#include "../src/sc_statemachine.h"
#include "../src/sc_eventdriven.h"
#include "../src/sc_timer.h"
#include <string.h>

/*! \file
Header of the state machine 'Statechart'.
*/


#ifndef SCT_EVENTS_STATECHART_H
#define SCT_EVENTS_STATECHART_H
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif

namespace statechart_events
{
typedef enum  {
	invalid_event = SC_INVALID_EVENT_VALUE,
	Start_Init,
	Total_Reset,
	Start_Config,
	Save_Config,
	Start_Operation,
	Reset,
	Statechart_main_region_StateInit_Initialization_Progress_Start_init_time_event_0,
	Statechart_main_region_StateOperation_Operation_running_StateProcedure_1_time_event_0,
	Statechart_main_region_StateOperation_Operation_running_StateProcedure_2_time_event_0,
	Statechart_main_region_StateOperation_Operation_running_StateProcedure_3_time_event_0
} StatechartEventName;

class SctEvent
{
	public:
		SctEvent(StatechartEventName name_) : name(name_){}
		virtual ~SctEvent(){}
		const StatechartEventName name;
		
};
		
template <typename T>
class TypedSctEvent : public SctEvent
{
	public:
		TypedSctEvent(StatechartEventName name_, T value_) :
			SctEvent(name_),
			value(value_)
			{}
		virtual ~TypedSctEvent(){}
		const T value;
};

class SctEvent__Start_Init : public SctEvent
{
	public:
		SctEvent__Start_Init(StatechartEventName name_) : SctEvent(name_){};
};
class SctEvent__Total_Reset : public SctEvent
{
	public:
		SctEvent__Total_Reset(StatechartEventName name_) : SctEvent(name_){};
};
class SctEvent__Start_Config : public SctEvent
{
	public:
		SctEvent__Start_Config(StatechartEventName name_) : SctEvent(name_){};
};
class SctEvent__Save_Config : public SctEvent
{
	public:
		SctEvent__Save_Config(StatechartEventName name_) : SctEvent(name_){};
};
class SctEvent__Start_Operation : public SctEvent
{
	public:
		SctEvent__Start_Operation(StatechartEventName name_) : SctEvent(name_){};
};
class SctEvent__Reset : public SctEvent
{
	public:
		SctEvent__Reset(StatechartEventName name_) : SctEvent(name_){};
};
class TimedSctEvent : public SctEvent
{
	public:
		TimedSctEvent(StatechartEventName name_) : SctEvent(name_){};
};

}
#endif /* SCT_EVENTS_STATECHART_H */


/*! Define indices of states in the StateConfVector */
#define SCVI_MAIN_REGION_STATEZERO 0
#define SCVI_MAIN_REGION_STATEINIT 0
#define SCVI_MAIN_REGION_STATEINIT_INITIALIZATION_PROGRESS_START_INIT 0
#define SCVI_MAIN_REGION_STATEINIT_INITIALIZATION_PROGRESS_END_INIT 0
#define SCVI_MAIN_REGION_STATEIDLE 0
#define SCVI_MAIN_REGION_STATECONFIG 0
#define SCVI_MAIN_REGION_STATEOPERATION 0
#define SCVI_MAIN_REGION_STATEOPERATION_OPERATION_RUNNING_STATEPROCEDURE_1 0
#define SCVI_MAIN_REGION_STATEOPERATION_OPERATION_RUNNING_STATEPROCEDURE_2 0
#define SCVI_MAIN_REGION_STATEOPERATION_OPERATION_RUNNING_STATEPROCEDURE_3 0
#define SCVI_MAIN_REGION_STATECOMPLETE 0


class Statechart : public sc::timer::TimedInterface, public sc::EventDrivenInterface
{
	public:
		Statechart();
		
		virtual ~Statechart();
		
		/*! Enumeration of all states */ 
		typedef enum
		{
			Statechart_last_state,
			main_region_StateZero,
			main_region_StateInit,
			main_region_StateInit_Initialization_Progress_Start_init,
			main_region_StateInit_Initialization_Progress_End_init,
			main_region_StateIdle,
			main_region_StateConfig,
			main_region_StateOperation,
			main_region_StateOperation_Operation_running_StateProcedure_1,
			main_region_StateOperation_Operation_running_StateProcedure_2,
			main_region_StateOperation_Operation_running_StateProcedure_3,
			main_region_StateComplete
		} StatechartStates;
					
		static const sc_integer numStates = 11;
		
		
		/*! Raises the in event 'Start_Init' that is defined in the default interface scope. */
		void raiseStart_Init();
		
		/*! Raises the in event 'Total_Reset' that is defined in the default interface scope. */
		void raiseTotal_Reset();
		
		/*! Raises the in event 'Start_Config' that is defined in the default interface scope. */
		void raiseStart_Config();
		
		/*! Raises the in event 'Save_Config' that is defined in the default interface scope. */
		void raiseSave_Config();
		
		/*! Raises the in event 'Start_Operation' that is defined in the default interface scope. */
		void raiseStart_Operation();
		
		/*! Raises the in event 'Reset' that is defined in the default interface scope. */
		void raiseReset();
		
		/*! Gets the value of the variable 'init_time' that is defined in the default interface scope. */
		sc_integer getInit_time() const;
		/*! Sets the value of the variable 'init_time' that is defined in the default interface scope. */
		void setInit_time(sc_integer init_time);
		/*! Gets the value of the variable 'procedure1_time' that is defined in the default interface scope. */
		sc_integer getProcedure1_time() const;
		/*! Sets the value of the variable 'procedure1_time' that is defined in the default interface scope. */
		void setProcedure1_time(sc_integer procedure1_time);
		/*! Gets the value of the variable 'procedure2_time' that is defined in the default interface scope. */
		sc_integer getProcedure2_time() const;
		/*! Sets the value of the variable 'procedure2_time' that is defined in the default interface scope. */
		void setProcedure2_time(sc_integer procedure2_time);
		/*! Gets the value of the variable 'procedure3_time' that is defined in the default interface scope. */
		sc_integer getProcedure3_time() const;
		/*! Sets the value of the variable 'procedure3_time' that is defined in the default interface scope. */
		void setProcedure3_time(sc_integer procedure3_time);
		//! Inner class for default interface scope operation callbacks.
		class OperationCallback
		{
			public:
				virtual ~OperationCallback() = 0;
				
				virtual void ESP_digitalWrite(sc_integer pin, sc_integer value) = 0;
				
				virtual void ESP_UartStart(sc_integer rate) = 0;
				
				virtual void ESP_UartRead() = 0;
				
				
		};
		
		/*! Set the working instance of the operation callback interface 'OperationCallback'. */
		void setOperationCallback(OperationCallback* operationCallback);
		
		/*! Can be used by the client code to trigger a run to completion step without raising an event. */
		void triggerWithoutEvent();
		
		/*
		 * Functions inherited from StatemachineInterface
		 */
		virtual void enter();
		
		virtual void exit();
		
		/*!
		 * Checks if the state machine is active (until 2.4.1 this method was used for states).
		 * A state machine is active if it has been entered. It is inactive if it has not been entered at all or if it has been exited.
		 */
		virtual sc_boolean isActive() const;
		
		
		/*!
		* Checks if all active states are final. 
		* If there are no active states then the state machine is considered being inactive. In this case this method returns false.
		*/
		virtual sc_boolean isFinal() const;
		
		/*! 
		 * Checks if member of the state machine must be set. For example an operation callback.
		 */
		sc_boolean check();
		
		/*
		 * Functions inherited from TimedStatemachineInterface
		 */
		virtual void setTimerService(sc::timer::TimerServiceInterface* timerService_);
		
		virtual sc::timer::TimerServiceInterface* getTimerService();
		
		virtual void raiseTimeEvent(sc_eventid event);
		
		virtual sc_integer getNumberOfParallelTimeEvents();
		
		
		
		/*! Checks if the specified state is active (until 2.4.1 the used method for states was calles isActive()). */
		sc_boolean isStateActive(StatechartStates state) const;
		
		//! number of time events used by the state machine.
		static const sc_integer timeEventsCount = 4;
		
		//! number of time events that can be active at once.
		static const sc_integer parallelTimeEventsCount = 1;
		
		
	protected:
		
		
	private:
		Statechart(const Statechart &rhs);
		Statechart& operator=(const Statechart&);
		
		sc_integer low;
		sc_integer high;
		sc_integer led_init_pin;
		sc_integer baud_rate;
		sc_boolean internal_dispatch_event(statechart_events::SctEvent * event);
		
		sc_integer init_time;
		sc_integer procedure1_time;
		sc_integer procedure2_time;
		sc_integer procedure3_time;
		/*! Raises the in event 'Start_Init' that is defined in the default interface scope. */
		void internal_raiseStart_Init();
		sc_boolean Start_Init_raised;
		/*! Raises the in event 'Total_Reset' that is defined in the default interface scope. */
		void internal_raiseTotal_Reset();
		sc_boolean Total_Reset_raised;
		/*! Raises the in event 'Start_Config' that is defined in the default interface scope. */
		void internal_raiseStart_Config();
		sc_boolean Start_Config_raised;
		/*! Raises the in event 'Save_Config' that is defined in the default interface scope. */
		void internal_raiseSave_Config();
		sc_boolean Save_Config_raised;
		/*! Raises the in event 'Start_Operation' that is defined in the default interface scope. */
		void internal_raiseStart_Operation();
		sc_boolean Start_Operation_raised;
		/*! Raises the in event 'Reset' that is defined in the default interface scope. */
		void internal_raiseReset();
		sc_boolean Reset_raised;
		sc_boolean iface_dispatch_event(statechart_events::SctEvent * event);
		
		
		//! the maximum number of orthogonal states defines the dimension of the state configuration vector.
		static const sc_ushort maxOrthogonalStates = 1;
		
		sc::timer::TimerServiceInterface* timerService;
		sc_boolean timeEvents[timeEventsCount];
		
		
		StatechartStates stateConfVector[maxOrthogonalStates];
		
		
		
		OperationCallback* ifaceOperationCallback;
		
		sc_boolean completed;
		sc_boolean doCompletion;
		sc_boolean isExecuting;
		
		
		
		// prototypes of all internal functions
		
		void enact_main_region_StateInit_Initialization_Progress_Start_init();
		void enact_main_region_StateInit_Initialization_Progress_End_init();
		void enact_main_region_StateIdle();
		void enact_main_region_StateConfig();
		void enact_main_region_StateOperation_Operation_running_StateProcedure_1();
		void enact_main_region_StateOperation_Operation_running_StateProcedure_2();
		void enact_main_region_StateOperation_Operation_running_StateProcedure_3();
		void enact_main_region_StateComplete();
		void exact_main_region_StateInit_Initialization_Progress_Start_init();
		void exact_main_region_StateInit_Initialization_Progress_End_init();
		void exact_main_region_StateOperation_Operation_running_StateProcedure_1();
		void exact_main_region_StateOperation_Operation_running_StateProcedure_2();
		void exact_main_region_StateOperation_Operation_running_StateProcedure_3();
		void enseq_main_region_StateZero_default();
		void enseq_main_region_StateInit_default();
		void enseq_main_region_StateInit_Initialization_Progress_Start_init_default();
		void enseq_main_region_StateInit_Initialization_Progress_End_init_default();
		void enseq_main_region_StateIdle_default();
		void enseq_main_region_StateConfig_default();
		void enseq_main_region_StateOperation_default();
		void enseq_main_region_StateOperation_Operation_running_StateProcedure_1_default();
		void enseq_main_region_StateOperation_Operation_running_StateProcedure_2_default();
		void enseq_main_region_StateOperation_Operation_running_StateProcedure_3_default();
		void enseq_main_region_StateComplete_default();
		void enseq_main_region_default();
		void enseq_main_region_StateInit_Initialization_Progress_default();
		void enseq_main_region_StateOperation_Operation_running_default();
		void exseq_main_region_StateZero();
		void exseq_main_region_StateInit();
		void exseq_main_region_StateInit_Initialization_Progress_Start_init();
		void exseq_main_region_StateInit_Initialization_Progress_End_init();
		void exseq_main_region_StateIdle();
		void exseq_main_region_StateConfig();
		void exseq_main_region_StateOperation();
		void exseq_main_region_StateOperation_Operation_running_StateProcedure_1();
		void exseq_main_region_StateOperation_Operation_running_StateProcedure_2();
		void exseq_main_region_StateOperation_Operation_running_StateProcedure_3();
		void exseq_main_region_StateComplete();
		void exseq_main_region();
		void exseq_main_region_StateInit_Initialization_Progress();
		void exseq_main_region_StateOperation_Operation_running();
		void react_main_region__entry_Default();
		void react_main_region_StateInit_Initialization_Progress__entry_Default();
		void react_main_region_StateOperation_Operation_running__entry_Default();
		sc_integer main_region_StateZero_react(const sc_integer transitioned_before);
		sc_integer main_region_StateInit_react(const sc_integer transitioned_before);
		sc_integer main_region_StateInit_Initialization_Progress_Start_init_react(const sc_integer transitioned_before);
		sc_integer main_region_StateInit_Initialization_Progress_End_init_react(const sc_integer transitioned_before);
		sc_integer main_region_StateIdle_react(const sc_integer transitioned_before);
		sc_integer main_region_StateConfig_react(const sc_integer transitioned_before);
		sc_integer main_region_StateOperation_react(const sc_integer transitioned_before);
		sc_integer main_region_StateOperation_Operation_running_StateProcedure_1_react(const sc_integer transitioned_before);
		sc_integer main_region_StateOperation_Operation_running_StateProcedure_2_react(const sc_integer transitioned_before);
		sc_integer main_region_StateOperation_Operation_running_StateProcedure_3_react(const sc_integer transitioned_before);
		sc_integer main_region_StateComplete_react(const sc_integer transitioned_before);
		void clearInEvents();
		void microStep();
		void runCycle();
		
		
		statechart_events::SctEvent* getNextEvent();
		sc_boolean dispatch_event(statechart_events::SctEvent * event);
		statechart_events::StatechartEventName getTimedEventName(sc_eventid evid);
		std::deque<statechart_events::SctEvent*> inEventQueue;
		
		
		/*! Sets the value of the variable 'low' that is defined in the internal scope. */
		void setLow(sc_integer low);
		/*! Sets the value of the variable 'high' that is defined in the internal scope. */
		void setHigh(sc_integer high);
		/*! Sets the value of the variable 'led_init_pin' that is defined in the internal scope. */
		void setLed_init_pin(sc_integer led_init_pin);
		/*! Sets the value of the variable 'baud_rate' that is defined in the internal scope. */
		void setBaud_rate(sc_integer baud_rate);
		
		
};


inline Statechart::OperationCallback::~OperationCallback() {}


#endif /* STATECHART_H_ */
