/* Generated by itemis CREATE code generator. */

#ifndef STATECHART_H_
#define STATECHART_H_

/*!
Forward declaration for the Statechart state machine.
*/
class Statechart;


#include <deque>
#include "sc_types.h"
#include "sc_statemachine.h"
#include "sc_eventdriven.h"
#include <string.h>

/*! \file
Header of the state machine 'Statechart'.
*/


class Statechart : public sc::EventDrivenInterface
{
	public:
		Statechart();
		
		virtual ~Statechart();
		
		
		
		/*! Enumeration of all states. */
		enum class State
		{
			NO_STATE,
			main_region_StateZero,
			main_region_StateInit,
			main_region_StateInit_Initialization_Progress_Start_init,
			main_region_StateInit_Initialization_Progress_End_init,
			main_region_StateInit_Initialization_Progress_Init_Buzzer,
			main_region_StateInit_Initialization_Progress_Init_i2C,
			main_region_StateInit_Initialization_Progress_Init_Display,
			main_region_StateInit_Initialization_Progress_Init_Mixer,
			main_region_StateInit_Initialization_Progress_Init_Keypad,
			main_region_StateInit_Initialization_Progress_Init_Heater,
			main_region_StateIdle,
			main_region_StateConfig,
			main_region_StateOperation,
			main_region_StateOperation_Operation_running_StateProcedure_1,
			main_region_StateOperation_Operation_running_StateProcedure_2,
			main_region_StateOperation_Operation_running_StateProcedure_3,
			main_region_StateOperation_Operation_running_StateProcedure_Start,
			main_region_StateComplete
		};
		
		/*! The number of states. */
		static constexpr const sc::integer numStates {18};
		static constexpr const sc::integer scvi_main_region_StateZero {0};
		static constexpr const sc::integer scvi_main_region_StateInit {0};
		static constexpr const sc::integer scvi_main_region_StateInit_Initialization_Progress_Start_init {0};
		static constexpr const sc::integer scvi_main_region_StateInit_Initialization_Progress_End_init {0};
		static constexpr const sc::integer scvi_main_region_StateInit_Initialization_Progress_Init_Buzzer {0};
		static constexpr const sc::integer scvi_main_region_StateInit_Initialization_Progress_Init_i2C {0};
		static constexpr const sc::integer scvi_main_region_StateInit_Initialization_Progress_Init_Display {0};
		static constexpr const sc::integer scvi_main_region_StateInit_Initialization_Progress_Init_Mixer {0};
		static constexpr const sc::integer scvi_main_region_StateInit_Initialization_Progress_Init_Keypad {0};
		static constexpr const sc::integer scvi_main_region_StateInit_Initialization_Progress_Init_Heater {0};
		static constexpr const sc::integer scvi_main_region_StateIdle {0};
		static constexpr const sc::integer scvi_main_region_StateConfig {0};
		static constexpr const sc::integer scvi_main_region_StateOperation {0};
		static constexpr const sc::integer scvi_main_region_StateOperation_Operation_running_StateProcedure_1 {0};
		static constexpr const sc::integer scvi_main_region_StateOperation_Operation_running_StateProcedure_2 {0};
		static constexpr const sc::integer scvi_main_region_StateOperation_Operation_running_StateProcedure_3 {0};
		static constexpr const sc::integer scvi_main_region_StateOperation_Operation_running_StateProcedure_Start {0};
		static constexpr const sc::integer scvi_main_region_StateComplete {0};
		
		/*! Enumeration of all events which are consumed. */
		enum class Event
		{
			NO_EVENT,
			Total_Reset,
			Start_Config,
			Save_Config,
			Start_Operation,
			Reset,
			Restart_Config
		};
		
		class EventInstance
		{
			public:
				explicit  EventInstance(Event id) noexcept : eventId(id){}
				virtual ~EventInstance() = default;
				const Event eventId;
		};
		/*! Raises the in event 'Total_Reset' of default interface scope. */
		void raiseTotal_Reset();
		/*! Raises the in event 'Start_Config' of default interface scope. */
		void raiseStart_Config();
		/*! Raises the in event 'Save_Config' of default interface scope. */
		void raiseSave_Config();
		/*! Raises the in event 'Start_Operation' of default interface scope. */
		void raiseStart_Operation();
		/*! Raises the in event 'Reset' of default interface scope. */
		void raiseReset();
		/*! Raises the in event 'Restart_Config' of default interface scope. */
		void raiseRestart_Config();
		
		
		/*! Gets the value of the variable 'baudrate' that is defined in the default interface scope. */
		sc::integer getBaudrate() const noexcept;
		/*! Sets the value of the variable 'baudrate' that is defined in the default interface scope. */
		void setBaudrate(sc::integer baudrate) noexcept;
		/*! Gets the value of the variable '__StateZero' that is defined in the default interface scope. */
		std::string get__StateZero() const;
		/*! Sets the value of the variable '__StateZero' that is defined in the default interface scope. */
		void set__StateZero(std::string __StateZero);
		/*! Gets the value of the variable '__StateInit' that is defined in the default interface scope. */
		std::string get__StateInit() const;
		/*! Sets the value of the variable '__StateInit' that is defined in the default interface scope. */
		void set__StateInit(std::string __StateInit);
		/*! Gets the value of the variable '__StateIdle' that is defined in the default interface scope. */
		std::string get__StateIdle() const;
		/*! Sets the value of the variable '__StateIdle' that is defined in the default interface scope. */
		void set__StateIdle(std::string __StateIdle);
		/*! Gets the value of the variable '__StateConfig' that is defined in the default interface scope. */
		std::string get__StateConfig() const;
		/*! Sets the value of the variable '__StateConfig' that is defined in the default interface scope. */
		void set__StateConfig(std::string __StateConfig);
		/*! Gets the value of the variable '__StateComplete' that is defined in the default interface scope. */
		std::string get__StateComplete() const;
		/*! Sets the value of the variable '__StateComplete' that is defined in the default interface scope. */
		void set__StateComplete(std::string __StateComplete);
		/*! Gets the value of the variable '__StateOperation' that is defined in the default interface scope. */
		std::string get__StateOperation() const;
		/*! Sets the value of the variable '__StateOperation' that is defined in the default interface scope. */
		void set__StateOperation(std::string __StateOperation);
		/*! Gets the value of the variable '__StateOp1' that is defined in the default interface scope. */
		std::string get__StateOp1() const;
		/*! Sets the value of the variable '__StateOp1' that is defined in the default interface scope. */
		void set__StateOp1(std::string __StateOp1);
		/*! Gets the value of the variable '__StateOp2' that is defined in the default interface scope. */
		std::string get__StateOp2() const;
		/*! Sets the value of the variable '__StateOp2' that is defined in the default interface scope. */
		void set__StateOp2(std::string __StateOp2);
		/*! Gets the value of the variable '__StateOp3' that is defined in the default interface scope. */
		std::string get__StateOp3() const;
		/*! Sets the value of the variable '__StateOp3' that is defined in the default interface scope. */
		void set__StateOp3(std::string __StateOp3);
		//! Inner class for default interface scope operation callbacks.
		class OperationCallback
		{
			public:
				virtual ~OperationCallback() = 0;
				
				virtual void ESP_initUart(sc::integer rate) = 0;
				
				virtual void ESP_printState(std::string state) = 0;
				
				virtual void ESP_stateChange() = 0;
				
				virtual void ESP_printConfig() = 0;
				
				virtual void ESP_buzzerInit(sc::integer pin) = 0;
				
				virtual void ESP_buzzerComplete(sc::integer pin) = 0;
				
				virtual void ESP_i2CInit(sc::integer SDA_pin, sc::integer SCL_pin) = 0;
				
				virtual void ESP_displayInit() = 0;
				
				virtual void ESP_displayIdle() = 0;
				
				virtual void ESP_displayConfig() = 0;
				
				virtual void ESP_displayComplete() = 0;
				
				virtual void ESP_displayProcedure() = 0;
				
				virtual void ESP_displayProcedure1() = 0;
				
				virtual void ESP_displayProcedure2() = 0;
				
				virtual void ESP_displayProcedure3() = 0;
				
				virtual void ESP_displayInitialConfig() = 0;
				
				virtual void ESP_mixerInit(sc::integer pin) = 0;
				
				virtual void ESP_mixerON(sc::integer pin) = 0;
				
				virtual void ESP_mixerOFF(sc::integer pin) = 0;
				
				virtual void ESP_keypadInit() = 0;
				
				virtual void ESP_heaterInit() = 0;
				
				virtual void ESP_idleNextState() = 0;
				
				virtual void ESP_configNextState() = 0;
				
				virtual void ESP_completeNextState() = 0;
				
				virtual void ESP_procedure(sc::integer procedure) = 0;
				
				virtual void ESP_setDefaults() = 0;
				
				
		};
		
		/*! Set the working instance of the operation callback interface 'OperationCallback'. */
		void setOperationCallback(OperationCallback* operationCallback) noexcept;
		
		/*! Can be used by the client code to trigger a run to completion step without raising an event. */
		void triggerWithoutEvent() override;
		
		/*
		 * Functions inherited from StatemachineInterface
		 */
		 void enter() override;
		
		 void exit() override;
		
		/*!
		 * Checks if the state machine is active (until 2.4.1 this method was used for states).
		 * A state machine is active if it has been entered. It is inactive if it has not been entered at all or if it has been exited.
		 */
		 bool isActive() const noexcept override;
		
		
		/*!
		* Checks if all active states are final. 
		* If there are no active states then the state machine is considered being inactive. In this case this method returns false.
		*/
		 bool isFinal() const noexcept override;
		
		/*! 
		 * Checks if member of the state machine must be set. For example an operation callback.
		 */
		bool check() const noexcept;
		
		
		/*! Checks if the specified state is active (until 2.4.1 the used method for states was calles isActive()). */
		bool isStateActive(State state) const noexcept;
		
		
		
	protected:
		
		
		std::deque<EventInstance*> incomingEventQueue;
		
		EventInstance* getNextEvent() noexcept;
		
		bool dispatchEvent(EventInstance* event);
		
		
		
	private:
		Statechart(const Statechart &rhs);
		Statechart& operator=(const Statechart&);
		
		sc::integer buzzer_pin {25};
		sc::integer SDA_pin {21};
		sc::integer SCL_pin {22};
		sc::integer mixer_pin {15};
		
		
		sc::integer baudrate {115200};
		std::string __StateZero {"ZERO"};
		std::string __StateInit {"INITIALIZATIONS"};
		std::string __StateIdle {"IDLE"};
		std::string __StateConfig {"CONFIGURATIONS"};
		std::string __StateComplete {"COMPLETE"};
		std::string __StateOperation {"OPERATION START"};
		std::string __StateOp1 {"PROCEDURE ONE"};
		std::string __StateOp2 {"PROCEDURE TWO"};
		std::string __StateOp3 {"PROCEDURE THREE"};
		
		
		
		//! the maximum number of orthogonal states defines the dimension of the state configuration vector.
		static const sc::ushort maxOrthogonalStates {1};
		
		
		
		State stateConfVector[maxOrthogonalStates];
		
		
		
		OperationCallback* ifaceOperationCallback;
		
		bool completed {false};
		bool doCompletion {false};
		bool isExecuting {false};
		
		
		
		// prototypes of all internal functions
		
		void enact_main_region_StateZero();
		void enact_main_region_StateInit_Initialization_Progress_Start_init();
		void enact_main_region_StateInit_Initialization_Progress_End_init();
		void enact_main_region_StateInit_Initialization_Progress_Init_Buzzer();
		void enact_main_region_StateInit_Initialization_Progress_Init_i2C();
		void enact_main_region_StateInit_Initialization_Progress_Init_Display();
		void enact_main_region_StateInit_Initialization_Progress_Init_Mixer();
		void enact_main_region_StateInit_Initialization_Progress_Init_Keypad();
		void enact_main_region_StateInit_Initialization_Progress_Init_Heater();
		void enact_main_region_StateIdle();
		void enact_main_region_StateConfig();
		void enact_main_region_StateOperation_Operation_running_StateProcedure_1();
		void enact_main_region_StateOperation_Operation_running_StateProcedure_2();
		void enact_main_region_StateOperation_Operation_running_StateProcedure_3();
		void enact_main_region_StateOperation_Operation_running_StateProcedure_Start();
		void enact_main_region_StateComplete();
		void exact_main_region_StateZero();
		void exact_main_region_StateInit_Initialization_Progress_End_init();
		void exact_main_region_StateIdle();
		void exact_main_region_StateConfig();
		void exact_main_region_StateOperation_Operation_running_StateProcedure_1();
		void exact_main_region_StateOperation_Operation_running_StateProcedure_2();
		void exact_main_region_StateOperation_Operation_running_StateProcedure_3();
		void exact_main_region_StateOperation_Operation_running_StateProcedure_Start();
		void exact_main_region_StateComplete();
		void enseq_main_region_StateZero_default();
		void enseq_main_region_StateInit_Initialization_Progress_Start_init_default();
		void enseq_main_region_StateIdle_default();
		void enseq_main_region_StateConfig_default();
		void enseq_main_region_StateOperation_default();
		void enseq_main_region_StateOperation_Operation_running_StateProcedure_Start_default();
		void enseq_main_region_default();
		void enseq_main_region_StateInit_Initialization_Progress_default();
		void enseq_main_region_StateOperation_Operation_running_default();
		void exseq_main_region_StateZero();
		void exseq_main_region_StateInit();
		void exseq_main_region_StateInit_Initialization_Progress_Start_init();
		void exseq_main_region_StateInit_Initialization_Progress_End_init();
		void exseq_main_region_StateInit_Initialization_Progress_Init_Buzzer();
		void exseq_main_region_StateInit_Initialization_Progress_Init_i2C();
		void exseq_main_region_StateInit_Initialization_Progress_Init_Display();
		void exseq_main_region_StateInit_Initialization_Progress_Init_Mixer();
		void exseq_main_region_StateInit_Initialization_Progress_Init_Keypad();
		void exseq_main_region_StateInit_Initialization_Progress_Init_Heater();
		void exseq_main_region_StateIdle();
		void exseq_main_region_StateConfig();
		void exseq_main_region_StateOperation();
		void exseq_main_region_StateOperation_Operation_running_StateProcedure_1();
		void exseq_main_region_StateOperation_Operation_running_StateProcedure_2();
		void exseq_main_region_StateOperation_Operation_running_StateProcedure_3();
		void exseq_main_region_StateOperation_Operation_running_StateProcedure_Start();
		void exseq_main_region_StateComplete();
		void exseq_main_region();
		void exseq_main_region_StateInit_Initialization_Progress();
		void exseq_main_region_StateOperation_Operation_running();
		void react_main_region__entry_Default();
		void react_main_region_StateInit_Initialization_Progress__entry_Default();
		void react_main_region_StateOperation_Operation_running__entry_Default();
		sc::integer main_region_StateZero_react(const sc::integer transitioned_before);
		sc::integer main_region_StateInit_react(const sc::integer transitioned_before);
		sc::integer main_region_StateInit_Initialization_Progress_Start_init_react(const sc::integer transitioned_before);
		sc::integer main_region_StateInit_Initialization_Progress_End_init_react(const sc::integer transitioned_before);
		sc::integer main_region_StateInit_Initialization_Progress_Init_Buzzer_react(const sc::integer transitioned_before);
		sc::integer main_region_StateInit_Initialization_Progress_Init_i2C_react(const sc::integer transitioned_before);
		sc::integer main_region_StateInit_Initialization_Progress_Init_Display_react(const sc::integer transitioned_before);
		sc::integer main_region_StateInit_Initialization_Progress_Init_Mixer_react(const sc::integer transitioned_before);
		sc::integer main_region_StateInit_Initialization_Progress_Init_Keypad_react(const sc::integer transitioned_before);
		sc::integer main_region_StateInit_Initialization_Progress_Init_Heater_react(const sc::integer transitioned_before);
		sc::integer main_region_StateIdle_react(const sc::integer transitioned_before);
		sc::integer main_region_StateConfig_react(const sc::integer transitioned_before);
		sc::integer main_region_StateOperation_react(const sc::integer transitioned_before);
		sc::integer main_region_StateOperation_Operation_running_StateProcedure_1_react(const sc::integer transitioned_before);
		sc::integer main_region_StateOperation_Operation_running_StateProcedure_2_react(const sc::integer transitioned_before);
		sc::integer main_region_StateOperation_Operation_running_StateProcedure_3_react(const sc::integer transitioned_before);
		sc::integer main_region_StateOperation_Operation_running_StateProcedure_Start_react(const sc::integer transitioned_before);
		sc::integer main_region_StateComplete_react(const sc::integer transitioned_before);
		void clearInEvents() noexcept;
		void microStep();
		void runCycle();
		
		
		/*! Sets the value of the variable 'buzzer_pin' that is defined in the internal scope. */
		void setBuzzer_pin(sc::integer buzzer_pin) noexcept;
		/*! Sets the value of the variable 'SDA_pin' that is defined in the internal scope. */
		void setSDA_pin(sc::integer SDA_pin) noexcept;
		/*! Sets the value of the variable 'SCL_pin' that is defined in the internal scope. */
		void setSCL_pin(sc::integer SCL_pin) noexcept;
		/*! Sets the value of the variable 'mixer_pin' that is defined in the internal scope. */
		void setMixer_pin(sc::integer mixer_pin) noexcept;
		
		/*! Indicates event 'Total_Reset' of default interface scope is active. */
		bool Total_Reset_raised {false};
		
		/*! Indicates event 'Start_Config' of default interface scope is active. */
		bool Start_Config_raised {false};
		
		/*! Indicates event 'Save_Config' of default interface scope is active. */
		bool Save_Config_raised {false};
		
		/*! Indicates event 'Start_Operation' of default interface scope is active. */
		bool Start_Operation_raised {false};
		
		/*! Indicates event 'Reset' of default interface scope is active. */
		bool Reset_raised {false};
		
		/*! Indicates event 'Restart_Config' of default interface scope is active. */
		bool Restart_Config_raised {false};
		
		
		
};


inline Statechart::OperationCallback::~OperationCallback() {}


#endif /* STATECHART_H_ */
