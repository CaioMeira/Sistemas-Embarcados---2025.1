/* Generated by itemis CREATE code generator. */

#include "Statechart.h"

/*! \file
Implementation of the state machine 'Statechart'
*/




Statechart::Statechart()
{
	for (sc::ushort state_vec_pos = 0; state_vec_pos < maxOrthogonalStates; ++state_vec_pos)
		stateConfVector[state_vec_pos] = Statechart::State::NO_STATE;
	
	clearInEvents();
}

Statechart::~Statechart()
{
	while (!incomingEventQueue.empty()) {
		auto nextEvent{incomingEventQueue.front()};
		incomingEventQueue.pop_front();
		delete nextEvent;
	}
}



Statechart::EventInstance* Statechart::getNextEvent() noexcept
{
	Statechart::EventInstance* nextEvent = 0;

	if(!incomingEventQueue.empty()) {
		nextEvent = incomingEventQueue.front();
		incomingEventQueue.pop_front();
	}
	
	return nextEvent;
	
}					


	
bool Statechart::dispatchEvent(Statechart::EventInstance* event)
{
	if(event == nullptr) {
		return false;
	}
								
	switch(event->eventId)
	{
		case Statechart::Event::Total_Reset:
		{
			Total_Reset_raised = true;
			break;
		}
		case Statechart::Event::Start_Config:
		{
			Start_Config_raised = true;
			break;
		}
		case Statechart::Event::Save_Config:
		{
			Save_Config_raised = true;
			break;
		}
		case Statechart::Event::Start_Operation:
		{
			Start_Operation_raised = true;
			break;
		}
		case Statechart::Event::Reset:
		{
			Reset_raised = true;
			break;
		}
		case Statechart::Event::Restart_Config:
		{
			Restart_Config_raised = true;
			break;
		}
		
		
		default:
			//pointer got out of scope
			delete event;
			return false;
	}
	//pointer got out of scope
	delete event;
	return true;
}


/*! Raises the in event 'Total_Reset' of default interface scope. */
void Statechart::raiseTotal_Reset() {
	incomingEventQueue.push_back(new Statechart::EventInstance(Statechart::Event::Total_Reset))
	;
	runCycle();
}


/*! Raises the in event 'Start_Config' of default interface scope. */
void Statechart::raiseStart_Config() {
	incomingEventQueue.push_back(new Statechart::EventInstance(Statechart::Event::Start_Config))
	;
	runCycle();
}


/*! Raises the in event 'Save_Config' of default interface scope. */
void Statechart::raiseSave_Config() {
	incomingEventQueue.push_back(new Statechart::EventInstance(Statechart::Event::Save_Config))
	;
	runCycle();
}


/*! Raises the in event 'Start_Operation' of default interface scope. */
void Statechart::raiseStart_Operation() {
	incomingEventQueue.push_back(new Statechart::EventInstance(Statechart::Event::Start_Operation))
	;
	runCycle();
}


/*! Raises the in event 'Reset' of default interface scope. */
void Statechart::raiseReset() {
	incomingEventQueue.push_back(new Statechart::EventInstance(Statechart::Event::Reset))
	;
	runCycle();
}


/*! Raises the in event 'Restart_Config' of default interface scope. */
void Statechart::raiseRestart_Config() {
	incomingEventQueue.push_back(new Statechart::EventInstance(Statechart::Event::Restart_Config))
	;
	runCycle();
}



bool Statechart::isActive() const noexcept
{
	return stateConfVector[0] != Statechart::State::NO_STATE;
}

/* 
 * Always returns 'false' since this state machine can never become final.
 */
bool Statechart::isFinal() const noexcept
{
	   return false;
}

bool Statechart::check() const noexcept{
	if (this->ifaceOperationCallback == nullptr) {
		return false;
	}
	return true;
}


bool Statechart::isStateActive(State state) const noexcept
{
	switch (state)
	{
		case Statechart::State::main_region_StateZero :
		{
			return  (stateConfVector[scvi_main_region_StateZero] == Statechart::State::main_region_StateZero);
			break;
		}
		case Statechart::State::main_region_StateInit :
		{
			return  (stateConfVector[scvi_main_region_StateInit] >= Statechart::State::main_region_StateInit && stateConfVector[scvi_main_region_StateInit] <= Statechart::State::main_region_StateInit_Initialization_Progress_Init_Heater);
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_Start_init :
		{
			return  (stateConfVector[scvi_main_region_StateInit_Initialization_Progress_Start_init] == Statechart::State::main_region_StateInit_Initialization_Progress_Start_init);
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_End_init :
		{
			return  (stateConfVector[scvi_main_region_StateInit_Initialization_Progress_End_init] == Statechart::State::main_region_StateInit_Initialization_Progress_End_init);
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_Init_Buzzer :
		{
			return  (stateConfVector[scvi_main_region_StateInit_Initialization_Progress_Init_Buzzer] == Statechart::State::main_region_StateInit_Initialization_Progress_Init_Buzzer);
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_Init_i2C :
		{
			return  (stateConfVector[scvi_main_region_StateInit_Initialization_Progress_Init_i2C] == Statechart::State::main_region_StateInit_Initialization_Progress_Init_i2C);
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_Init_Display :
		{
			return  (stateConfVector[scvi_main_region_StateInit_Initialization_Progress_Init_Display] == Statechart::State::main_region_StateInit_Initialization_Progress_Init_Display);
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_Init_Mixer :
		{
			return  (stateConfVector[scvi_main_region_StateInit_Initialization_Progress_Init_Mixer] == Statechart::State::main_region_StateInit_Initialization_Progress_Init_Mixer);
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_Init_Keypad :
		{
			return  (stateConfVector[scvi_main_region_StateInit_Initialization_Progress_Init_Keypad] == Statechart::State::main_region_StateInit_Initialization_Progress_Init_Keypad);
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_Init_Heater :
		{
			return  (stateConfVector[scvi_main_region_StateInit_Initialization_Progress_Init_Heater] == Statechart::State::main_region_StateInit_Initialization_Progress_Init_Heater);
			break;
		}
		case Statechart::State::main_region_StateIdle :
		{
			return  (stateConfVector[scvi_main_region_StateIdle] == Statechart::State::main_region_StateIdle);
			break;
		}
		case Statechart::State::main_region_StateConfig :
		{
			return  (stateConfVector[scvi_main_region_StateConfig] == Statechart::State::main_region_StateConfig);
			break;
		}
		case Statechart::State::main_region_StateOperation :
		{
			return  (stateConfVector[scvi_main_region_StateOperation] >= Statechart::State::main_region_StateOperation && stateConfVector[scvi_main_region_StateOperation] <= Statechart::State::main_region_StateOperation_Operation_running_StateProcedure_Start);
			break;
		}
		case Statechart::State::main_region_StateOperation_Operation_running_StateProcedure_1 :
		{
			return  (stateConfVector[scvi_main_region_StateOperation_Operation_running_StateProcedure_1] == Statechart::State::main_region_StateOperation_Operation_running_StateProcedure_1);
			break;
		}
		case Statechart::State::main_region_StateOperation_Operation_running_StateProcedure_2 :
		{
			return  (stateConfVector[scvi_main_region_StateOperation_Operation_running_StateProcedure_2] == Statechart::State::main_region_StateOperation_Operation_running_StateProcedure_2);
			break;
		}
		case Statechart::State::main_region_StateOperation_Operation_running_StateProcedure_3 :
		{
			return  (stateConfVector[scvi_main_region_StateOperation_Operation_running_StateProcedure_3] == Statechart::State::main_region_StateOperation_Operation_running_StateProcedure_3);
			break;
		}
		case Statechart::State::main_region_StateOperation_Operation_running_StateProcedure_Start :
		{
			return  (stateConfVector[scvi_main_region_StateOperation_Operation_running_StateProcedure_Start] == Statechart::State::main_region_StateOperation_Operation_running_StateProcedure_Start);
			break;
		}
		case Statechart::State::main_region_StateComplete :
		{
			return  (stateConfVector[scvi_main_region_StateComplete] == Statechart::State::main_region_StateComplete);
			break;
		}
		default:
		{
			/* State is not active*/
			return false;
			break;
		}
	}
}

void Statechart::setBuzzer_pin(sc::integer buzzer_pin_) noexcept
{
	this->buzzer_pin = buzzer_pin_;
}
void Statechart::setSDA_pin(sc::integer SDA_pin_) noexcept
{
	this->SDA_pin = SDA_pin_;
}
void Statechart::setSCL_pin(sc::integer SCL_pin_) noexcept
{
	this->SCL_pin = SCL_pin_;
}
void Statechart::setMixer_pin(sc::integer mixer_pin_) noexcept
{
	this->mixer_pin = mixer_pin_;
}
sc::integer Statechart::getBaudrate() const noexcept
{
	return baudrate
	;
}

void Statechart::setBaudrate(sc::integer baudrate_) noexcept
{
	this->baudrate = baudrate_;
}
std::string Statechart::get__StateZero() const
{
	return __StateZero
	;
}

void Statechart::set__StateZero(std::string __StateZero_)
{
	this->__StateZero = __StateZero_;
}
std::string Statechart::get__StateInit() const
{
	return __StateInit
	;
}

void Statechart::set__StateInit(std::string __StateInit_)
{
	this->__StateInit = __StateInit_;
}
std::string Statechart::get__StateIdle() const
{
	return __StateIdle
	;
}

void Statechart::set__StateIdle(std::string __StateIdle_)
{
	this->__StateIdle = __StateIdle_;
}
std::string Statechart::get__StateConfig() const
{
	return __StateConfig
	;
}

void Statechart::set__StateConfig(std::string __StateConfig_)
{
	this->__StateConfig = __StateConfig_;
}
std::string Statechart::get__StateComplete() const
{
	return __StateComplete
	;
}

void Statechart::set__StateComplete(std::string __StateComplete_)
{
	this->__StateComplete = __StateComplete_;
}
std::string Statechart::get__StateOperation() const
{
	return __StateOperation
	;
}

void Statechart::set__StateOperation(std::string __StateOperation_)
{
	this->__StateOperation = __StateOperation_;
}
std::string Statechart::get__StateOp1() const
{
	return __StateOp1
	;
}

void Statechart::set__StateOp1(std::string __StateOp1_)
{
	this->__StateOp1 = __StateOp1_;
}
std::string Statechart::get__StateOp2() const
{
	return __StateOp2
	;
}

void Statechart::set__StateOp2(std::string __StateOp2_)
{
	this->__StateOp2 = __StateOp2_;
}
std::string Statechart::get__StateOp3() const
{
	return __StateOp3
	;
}

void Statechart::set__StateOp3(std::string __StateOp3_)
{
	this->__StateOp3 = __StateOp3_;
}
void Statechart::setOperationCallback(OperationCallback* operationCallback) noexcept
{
	ifaceOperationCallback = operationCallback;
}

// implementations of all internal functions
void Statechart::enact_main_region_StateZero()
{
	/* Entry action for state 'StateZero'. */
	ifaceOperationCallback->ESP_initUart(baudrate);
	ifaceOperationCallback->ESP_printState(__StateZero);
	completed = true;
}

void Statechart::enact_main_region_StateInit_Initialization_Progress_Start_init()
{
	/* Entry action for state 'Start_init'. */
	ifaceOperationCallback->ESP_printState(__StateInit);
	completed = true;
}

void Statechart::enact_main_region_StateInit_Initialization_Progress_End_init()
{
	/* Entry action for state 'End_init'. */
	ifaceOperationCallback->ESP_setDefaults();
	completed = true;
}

void Statechart::enact_main_region_StateInit_Initialization_Progress_Init_Buzzer()
{
	/* Entry action for state 'Init_Buzzer'. */
	ifaceOperationCallback->ESP_buzzerInit(buzzer_pin);
	completed = true;
}

void Statechart::enact_main_region_StateInit_Initialization_Progress_Init_i2C()
{
	/* Entry action for state 'Init_i2C'. */
	ifaceOperationCallback->ESP_i2CInit(SDA_pin, SCL_pin);
	completed = true;
}

void Statechart::enact_main_region_StateInit_Initialization_Progress_Init_Display()
{
	/* Entry action for state 'Init_Display'. */
	ifaceOperationCallback->ESP_displayInit();
	completed = true;
}

void Statechart::enact_main_region_StateInit_Initialization_Progress_Init_Mixer()
{
	/* Entry action for state 'Init_Mixer'. */
	ifaceOperationCallback->ESP_mixerInit(mixer_pin);
	completed = true;
}

void Statechart::enact_main_region_StateInit_Initialization_Progress_Init_Keypad()
{
	/* Entry action for state 'Init_Keypad'. */
	ifaceOperationCallback->ESP_keypadInit();
	completed = true;
}

void Statechart::enact_main_region_StateInit_Initialization_Progress_Init_Heater()
{
	/* Entry action for state 'Init_Heater'. */
	ifaceOperationCallback->ESP_heaterInit();
	completed = true;
}

/* Entry action for state 'StateIdle'. */
void Statechart::enact_main_region_StateIdle()
{
	/* Entry action for state 'StateIdle'. */
	ifaceOperationCallback->ESP_printState(__StateIdle);
	ifaceOperationCallback->ESP_displayIdle();
	ifaceOperationCallback->ESP_printConfig();
	ifaceOperationCallback->ESP_idleNextState();
}

/* Entry action for state 'StateConfig'. */
void Statechart::enact_main_region_StateConfig()
{
	/* Entry action for state 'StateConfig'. */
	ifaceOperationCallback->ESP_printState(__StateConfig);
	ifaceOperationCallback->ESP_displayInitialConfig();
	ifaceOperationCallback->ESP_displayConfig();
	ifaceOperationCallback->ESP_configNextState();
}

void Statechart::enact_main_region_StateOperation_Operation_running_StateProcedure_1()
{
	/* Entry action for state 'StateProcedure_1'. */
	ifaceOperationCallback->ESP_printState(__StateOp1);
	ifaceOperationCallback->ESP_displayProcedure1();
	ifaceOperationCallback->ESP_procedure(1);
	completed = true;
}

void Statechart::enact_main_region_StateOperation_Operation_running_StateProcedure_2()
{
	/* Entry action for state 'StateProcedure_2'. */
	ifaceOperationCallback->ESP_printState(__StateOp2);
	ifaceOperationCallback->ESP_displayProcedure2();
	ifaceOperationCallback->ESP_procedure(2);
	completed = true;
}

void Statechart::enact_main_region_StateOperation_Operation_running_StateProcedure_3()
{
	/* Entry action for state 'StateProcedure_3'. */
	ifaceOperationCallback->ESP_printState(__StateOp3);
	ifaceOperationCallback->ESP_displayProcedure3();
	ifaceOperationCallback->ESP_procedure(3);
	completed = true;
}

void Statechart::enact_main_region_StateOperation_Operation_running_StateProcedure_Start()
{
	/* Entry action for state 'StateProcedure_Start'. */
	ifaceOperationCallback->ESP_printState(__StateOperation);
	ifaceOperationCallback->ESP_mixerON(mixer_pin);
	ifaceOperationCallback->ESP_displayProcedure();
	completed = true;
}

/* Entry action for state 'StateComplete'. */
void Statechart::enact_main_region_StateComplete()
{
	/* Entry action for state 'StateComplete'. */
	ifaceOperationCallback->ESP_printState(__StateComplete);
	ifaceOperationCallback->ESP_buzzerComplete(buzzer_pin);
	ifaceOperationCallback->ESP_displayComplete();
	ifaceOperationCallback->ESP_completeNextState();
}

/* Exit action for state 'StateZero'. */
void Statechart::exact_main_region_StateZero()
{
	/* Exit action for state 'StateZero'. */
	ifaceOperationCallback->ESP_stateChange();
}

/* Exit action for state 'End_init'. */
void Statechart::exact_main_region_StateInit_Initialization_Progress_End_init()
{
	/* Exit action for state 'End_init'. */
	ifaceOperationCallback->ESP_stateChange();
}

/* Exit action for state 'StateIdle'. */
void Statechart::exact_main_region_StateIdle()
{
	/* Exit action for state 'StateIdle'. */
	ifaceOperationCallback->ESP_stateChange();
}

/* Exit action for state 'StateConfig'. */
void Statechart::exact_main_region_StateConfig()
{
	/* Exit action for state 'StateConfig'. */
	ifaceOperationCallback->ESP_stateChange();
}

/* Exit action for state 'StateProcedure_1'. */
void Statechart::exact_main_region_StateOperation_Operation_running_StateProcedure_1()
{
	/* Exit action for state 'StateProcedure_1'. */
	ifaceOperationCallback->ESP_stateChange();
}

/* Exit action for state 'StateProcedure_2'. */
void Statechart::exact_main_region_StateOperation_Operation_running_StateProcedure_2()
{
	/* Exit action for state 'StateProcedure_2'. */
	ifaceOperationCallback->ESP_stateChange();
}

/* Exit action for state 'StateProcedure_3'. */
void Statechart::exact_main_region_StateOperation_Operation_running_StateProcedure_3()
{
	/* Exit action for state 'StateProcedure_3'. */
	ifaceOperationCallback->ESP_mixerOFF(mixer_pin);
	ifaceOperationCallback->ESP_stateChange();
}

/* Exit action for state 'StateProcedure_Start'. */
void Statechart::exact_main_region_StateOperation_Operation_running_StateProcedure_Start()
{
	/* Exit action for state 'StateProcedure_Start'. */
	ifaceOperationCallback->ESP_stateChange();
}

/* Exit action for state 'StateComplete'. */
void Statechart::exact_main_region_StateComplete()
{
	/* Exit action for state 'StateComplete'. */
	ifaceOperationCallback->ESP_stateChange();
}

/* 'default' enter sequence for state StateZero */
void Statechart::enseq_main_region_StateZero_default()
{
	/* 'default' enter sequence for state StateZero */
	enact_main_region_StateZero();
	stateConfVector[0] = Statechart::State::main_region_StateZero;
}

/* 'default' enter sequence for state Start_init */
void Statechart::enseq_main_region_StateInit_Initialization_Progress_Start_init_default()
{
	/* 'default' enter sequence for state Start_init */
	enact_main_region_StateInit_Initialization_Progress_Start_init();
	stateConfVector[0] = Statechart::State::main_region_StateInit_Initialization_Progress_Start_init;
}

/* 'default' enter sequence for state StateIdle */
void Statechart::enseq_main_region_StateIdle_default()
{
	/* 'default' enter sequence for state StateIdle */
	enact_main_region_StateIdle();
	stateConfVector[0] = Statechart::State::main_region_StateIdle;
}

/* 'default' enter sequence for state StateConfig */
void Statechart::enseq_main_region_StateConfig_default()
{
	/* 'default' enter sequence for state StateConfig */
	enact_main_region_StateConfig();
	stateConfVector[0] = Statechart::State::main_region_StateConfig;
}

/* 'default' enter sequence for state StateOperation */
void Statechart::enseq_main_region_StateOperation_default()
{
	/* 'default' enter sequence for state StateOperation */
	enseq_main_region_StateOperation_Operation_running_default();
}

/* 'default' enter sequence for state StateProcedure_Start */
void Statechart::enseq_main_region_StateOperation_Operation_running_StateProcedure_Start_default()
{
	/* 'default' enter sequence for state StateProcedure_Start */
	enact_main_region_StateOperation_Operation_running_StateProcedure_Start();
	stateConfVector[0] = Statechart::State::main_region_StateOperation_Operation_running_StateProcedure_Start;
}

/* 'default' enter sequence for region main region */
void Statechart::enseq_main_region_default()
{
	/* 'default' enter sequence for region main region */
	react_main_region__entry_Default();
}

/* 'default' enter sequence for region Initialization Progress */
void Statechart::enseq_main_region_StateInit_Initialization_Progress_default()
{
	/* 'default' enter sequence for region Initialization Progress */
	react_main_region_StateInit_Initialization_Progress__entry_Default();
}

/* 'default' enter sequence for region Operation running */
void Statechart::enseq_main_region_StateOperation_Operation_running_default()
{
	/* 'default' enter sequence for region Operation running */
	react_main_region_StateOperation_Operation_running__entry_Default();
}

/* Default exit sequence for state StateZero */
void Statechart::exseq_main_region_StateZero()
{
	/* Default exit sequence for state StateZero */
	stateConfVector[0] = Statechart::State::NO_STATE;
	exact_main_region_StateZero();
}

/* Default exit sequence for state StateInit */
void Statechart::exseq_main_region_StateInit()
{
	/* Default exit sequence for state StateInit */
	exseq_main_region_StateInit_Initialization_Progress();
	stateConfVector[0] = Statechart::State::NO_STATE;
}

/* Default exit sequence for state Start_init */
void Statechart::exseq_main_region_StateInit_Initialization_Progress_Start_init()
{
	/* Default exit sequence for state Start_init */
	stateConfVector[0] = Statechart::State::main_region_StateInit;
}

/* Default exit sequence for state End_init */
void Statechart::exseq_main_region_StateInit_Initialization_Progress_End_init()
{
	/* Default exit sequence for state End_init */
	stateConfVector[0] = Statechart::State::main_region_StateInit;
	exact_main_region_StateInit_Initialization_Progress_End_init();
}

/* Default exit sequence for state Init_Buzzer */
void Statechart::exseq_main_region_StateInit_Initialization_Progress_Init_Buzzer()
{
	/* Default exit sequence for state Init_Buzzer */
	stateConfVector[0] = Statechart::State::main_region_StateInit;
}

/* Default exit sequence for state Init_i2C */
void Statechart::exseq_main_region_StateInit_Initialization_Progress_Init_i2C()
{
	/* Default exit sequence for state Init_i2C */
	stateConfVector[0] = Statechart::State::main_region_StateInit;
}

/* Default exit sequence for state Init_Display */
void Statechart::exseq_main_region_StateInit_Initialization_Progress_Init_Display()
{
	/* Default exit sequence for state Init_Display */
	stateConfVector[0] = Statechart::State::main_region_StateInit;
}

/* Default exit sequence for state Init_Mixer */
void Statechart::exseq_main_region_StateInit_Initialization_Progress_Init_Mixer()
{
	/* Default exit sequence for state Init_Mixer */
	stateConfVector[0] = Statechart::State::main_region_StateInit;
}

/* Default exit sequence for state Init_Keypad */
void Statechart::exseq_main_region_StateInit_Initialization_Progress_Init_Keypad()
{
	/* Default exit sequence for state Init_Keypad */
	stateConfVector[0] = Statechart::State::main_region_StateInit;
}

/* Default exit sequence for state Init_Heater */
void Statechart::exseq_main_region_StateInit_Initialization_Progress_Init_Heater()
{
	/* Default exit sequence for state Init_Heater */
	stateConfVector[0] = Statechart::State::main_region_StateInit;
}

/* Default exit sequence for state StateIdle */
void Statechart::exseq_main_region_StateIdle()
{
	/* Default exit sequence for state StateIdle */
	stateConfVector[0] = Statechart::State::NO_STATE;
	exact_main_region_StateIdle();
}

/* Default exit sequence for state StateConfig */
void Statechart::exseq_main_region_StateConfig()
{
	/* Default exit sequence for state StateConfig */
	stateConfVector[0] = Statechart::State::NO_STATE;
	exact_main_region_StateConfig();
}

/* Default exit sequence for state StateOperation */
void Statechart::exseq_main_region_StateOperation()
{
	/* Default exit sequence for state StateOperation */
	exseq_main_region_StateOperation_Operation_running();
	stateConfVector[0] = Statechart::State::NO_STATE;
}

/* Default exit sequence for state StateProcedure_1 */
void Statechart::exseq_main_region_StateOperation_Operation_running_StateProcedure_1()
{
	/* Default exit sequence for state StateProcedure_1 */
	stateConfVector[0] = Statechart::State::main_region_StateOperation;
	exact_main_region_StateOperation_Operation_running_StateProcedure_1();
}

/* Default exit sequence for state StateProcedure_2 */
void Statechart::exseq_main_region_StateOperation_Operation_running_StateProcedure_2()
{
	/* Default exit sequence for state StateProcedure_2 */
	stateConfVector[0] = Statechart::State::main_region_StateOperation;
	exact_main_region_StateOperation_Operation_running_StateProcedure_2();
}

/* Default exit sequence for state StateProcedure_3 */
void Statechart::exseq_main_region_StateOperation_Operation_running_StateProcedure_3()
{
	/* Default exit sequence for state StateProcedure_3 */
	stateConfVector[0] = Statechart::State::main_region_StateOperation;
	exact_main_region_StateOperation_Operation_running_StateProcedure_3();
}

/* Default exit sequence for state StateProcedure_Start */
void Statechart::exseq_main_region_StateOperation_Operation_running_StateProcedure_Start()
{
	/* Default exit sequence for state StateProcedure_Start */
	stateConfVector[0] = Statechart::State::main_region_StateOperation;
	exact_main_region_StateOperation_Operation_running_StateProcedure_Start();
}

/* Default exit sequence for state StateComplete */
void Statechart::exseq_main_region_StateComplete()
{
	/* Default exit sequence for state StateComplete */
	stateConfVector[0] = Statechart::State::NO_STATE;
	exact_main_region_StateComplete();
}

/* Default exit sequence for region main region */
void Statechart::exseq_main_region()
{
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of Statechart.main_region) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case Statechart::State::main_region_StateZero :
		{
			exseq_main_region_StateZero();
			break;
		}
		case Statechart::State::main_region_StateInit :
		{
			exseq_main_region_StateInit();
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_Start_init :
		{
			exseq_main_region_StateInit_Initialization_Progress_Start_init();
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_End_init :
		{
			exseq_main_region_StateInit_Initialization_Progress_End_init();
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_Init_Buzzer :
		{
			exseq_main_region_StateInit_Initialization_Progress_Init_Buzzer();
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_Init_i2C :
		{
			exseq_main_region_StateInit_Initialization_Progress_Init_i2C();
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_Init_Display :
		{
			exseq_main_region_StateInit_Initialization_Progress_Init_Display();
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_Init_Mixer :
		{
			exseq_main_region_StateInit_Initialization_Progress_Init_Mixer();
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_Init_Keypad :
		{
			exseq_main_region_StateInit_Initialization_Progress_Init_Keypad();
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_Init_Heater :
		{
			exseq_main_region_StateInit_Initialization_Progress_Init_Heater();
			break;
		}
		case Statechart::State::main_region_StateIdle :
		{
			exseq_main_region_StateIdle();
			break;
		}
		case Statechart::State::main_region_StateConfig :
		{
			exseq_main_region_StateConfig();
			break;
		}
		case Statechart::State::main_region_StateOperation :
		{
			exseq_main_region_StateOperation();
			break;
		}
		case Statechart::State::main_region_StateOperation_Operation_running_StateProcedure_1 :
		{
			exseq_main_region_StateOperation_Operation_running_StateProcedure_1();
			break;
		}
		case Statechart::State::main_region_StateOperation_Operation_running_StateProcedure_2 :
		{
			exseq_main_region_StateOperation_Operation_running_StateProcedure_2();
			break;
		}
		case Statechart::State::main_region_StateOperation_Operation_running_StateProcedure_3 :
		{
			exseq_main_region_StateOperation_Operation_running_StateProcedure_3();
			break;
		}
		case Statechart::State::main_region_StateOperation_Operation_running_StateProcedure_Start :
		{
			exseq_main_region_StateOperation_Operation_running_StateProcedure_Start();
			break;
		}
		case Statechart::State::main_region_StateComplete :
		{
			exseq_main_region_StateComplete();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region Initialization Progress */
void Statechart::exseq_main_region_StateInit_Initialization_Progress()
{
	/* Default exit sequence for region Initialization Progress */
	/* Handle exit of all possible states (of Statechart.main_region.StateInit.Initialization_Progress) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case Statechart::State::main_region_StateInit_Initialization_Progress_Start_init :
		{
			exseq_main_region_StateInit_Initialization_Progress_Start_init();
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_End_init :
		{
			exseq_main_region_StateInit_Initialization_Progress_End_init();
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_Init_Buzzer :
		{
			exseq_main_region_StateInit_Initialization_Progress_Init_Buzzer();
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_Init_i2C :
		{
			exseq_main_region_StateInit_Initialization_Progress_Init_i2C();
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_Init_Display :
		{
			exseq_main_region_StateInit_Initialization_Progress_Init_Display();
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_Init_Mixer :
		{
			exseq_main_region_StateInit_Initialization_Progress_Init_Mixer();
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_Init_Keypad :
		{
			exseq_main_region_StateInit_Initialization_Progress_Init_Keypad();
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_Init_Heater :
		{
			exseq_main_region_StateInit_Initialization_Progress_Init_Heater();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region Operation running */
void Statechart::exseq_main_region_StateOperation_Operation_running()
{
	/* Default exit sequence for region Operation running */
	/* Handle exit of all possible states (of Statechart.main_region.StateOperation.Operation_running) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case Statechart::State::main_region_StateOperation_Operation_running_StateProcedure_1 :
		{
			exseq_main_region_StateOperation_Operation_running_StateProcedure_1();
			break;
		}
		case Statechart::State::main_region_StateOperation_Operation_running_StateProcedure_2 :
		{
			exseq_main_region_StateOperation_Operation_running_StateProcedure_2();
			break;
		}
		case Statechart::State::main_region_StateOperation_Operation_running_StateProcedure_3 :
		{
			exseq_main_region_StateOperation_Operation_running_StateProcedure_3();
			break;
		}
		case Statechart::State::main_region_StateOperation_Operation_running_StateProcedure_Start :
		{
			exseq_main_region_StateOperation_Operation_running_StateProcedure_Start();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default react sequence for initial entry  */
void Statechart::react_main_region__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_main_region_StateZero_default();
}

/* Default react sequence for initial entry  */
void Statechart::react_main_region_StateInit_Initialization_Progress__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_main_region_StateInit_Initialization_Progress_Start_init_default();
}

/* Default react sequence for initial entry  */
void Statechart::react_main_region_StateOperation_Operation_running__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_main_region_StateOperation_Operation_running_StateProcedure_Start_default();
}

sc::integer Statechart::main_region_StateZero_react(const sc::integer transitioned_before) {
	/* The reactions of state StateZero. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state StateZero */
		stateConfVector[0] = Statechart::State::NO_STATE;
		exact_main_region_StateZero();
		/* 'default' enter sequence for state StateInit */
		enseq_main_region_StateInit_Initialization_Progress_default();
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = transitioned_before;
	}
	return transitioned_after;
}

sc::integer Statechart::main_region_StateInit_react(const sc::integer transitioned_before) {
	/* The reactions of state StateInit. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (Total_Reset_raised)
			{ 
				exseq_main_region_StateInit();
				enseq_main_region_StateZero_default();
				transitioned_after = 0;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		} 
	} 
	return transitioned_after;
}

sc::integer Statechart::main_region_StateInit_Initialization_Progress_Start_init_react(const sc::integer transitioned_before) {
	/* The reactions of state Start_init. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state Start_init */
		stateConfVector[0] = Statechart::State::main_region_StateInit;
		/* 'default' enter sequence for state Init_Buzzer */
		enact_main_region_StateInit_Initialization_Progress_Init_Buzzer();
		stateConfVector[0] = Statechart::State::main_region_StateInit_Initialization_Progress_Init_Buzzer;
		main_region_StateInit_react(0);
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = main_region_StateInit_react(transitioned_before);
	}
	return transitioned_after;
}

sc::integer Statechart::main_region_StateInit_Initialization_Progress_End_init_react(const sc::integer transitioned_before) {
	/* The reactions of state End_init. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state StateInit */
		exseq_main_region_StateInit_Initialization_Progress();
		stateConfVector[0] = Statechart::State::NO_STATE;
		/* 'default' enter sequence for state StateIdle */
		enact_main_region_StateIdle();
		stateConfVector[0] = Statechart::State::main_region_StateIdle;
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = main_region_StateInit_react(transitioned_before);
	}
	return transitioned_after;
}

sc::integer Statechart::main_region_StateInit_Initialization_Progress_Init_Buzzer_react(const sc::integer transitioned_before) {
	/* The reactions of state Init_Buzzer. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state Init_Buzzer */
		stateConfVector[0] = Statechart::State::main_region_StateInit;
		/* 'default' enter sequence for state Init_i2C */
		enact_main_region_StateInit_Initialization_Progress_Init_i2C();
		stateConfVector[0] = Statechart::State::main_region_StateInit_Initialization_Progress_Init_i2C;
		main_region_StateInit_react(0);
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = main_region_StateInit_react(transitioned_before);
	}
	return transitioned_after;
}

sc::integer Statechart::main_region_StateInit_Initialization_Progress_Init_i2C_react(const sc::integer transitioned_before) {
	/* The reactions of state Init_i2C. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state Init_i2C */
		stateConfVector[0] = Statechart::State::main_region_StateInit;
		/* 'default' enter sequence for state Init_Display */
		enact_main_region_StateInit_Initialization_Progress_Init_Display();
		stateConfVector[0] = Statechart::State::main_region_StateInit_Initialization_Progress_Init_Display;
		main_region_StateInit_react(0);
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = main_region_StateInit_react(transitioned_before);
	}
	return transitioned_after;
}

sc::integer Statechart::main_region_StateInit_Initialization_Progress_Init_Display_react(const sc::integer transitioned_before) {
	/* The reactions of state Init_Display. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state Init_Display */
		stateConfVector[0] = Statechart::State::main_region_StateInit;
		/* 'default' enter sequence for state Init_Mixer */
		enact_main_region_StateInit_Initialization_Progress_Init_Mixer();
		stateConfVector[0] = Statechart::State::main_region_StateInit_Initialization_Progress_Init_Mixer;
		main_region_StateInit_react(0);
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = main_region_StateInit_react(transitioned_before);
	}
	return transitioned_after;
}

sc::integer Statechart::main_region_StateInit_Initialization_Progress_Init_Mixer_react(const sc::integer transitioned_before) {
	/* The reactions of state Init_Mixer. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state Init_Mixer */
		stateConfVector[0] = Statechart::State::main_region_StateInit;
		/* 'default' enter sequence for state Init_Keypad */
		enact_main_region_StateInit_Initialization_Progress_Init_Keypad();
		stateConfVector[0] = Statechart::State::main_region_StateInit_Initialization_Progress_Init_Keypad;
		main_region_StateInit_react(0);
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = main_region_StateInit_react(transitioned_before);
	}
	return transitioned_after;
}

sc::integer Statechart::main_region_StateInit_Initialization_Progress_Init_Keypad_react(const sc::integer transitioned_before) {
	/* The reactions of state Init_Keypad. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state Init_Keypad */
		stateConfVector[0] = Statechart::State::main_region_StateInit;
		/* 'default' enter sequence for state Init_Heater */
		enact_main_region_StateInit_Initialization_Progress_Init_Heater();
		stateConfVector[0] = Statechart::State::main_region_StateInit_Initialization_Progress_Init_Heater;
		main_region_StateInit_react(0);
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = main_region_StateInit_react(transitioned_before);
	}
	return transitioned_after;
}

sc::integer Statechart::main_region_StateInit_Initialization_Progress_Init_Heater_react(const sc::integer transitioned_before) {
	/* The reactions of state Init_Heater. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state Init_Heater */
		stateConfVector[0] = Statechart::State::main_region_StateInit;
		/* 'default' enter sequence for state End_init */
		enact_main_region_StateInit_Initialization_Progress_End_init();
		stateConfVector[0] = Statechart::State::main_region_StateInit_Initialization_Progress_End_init;
		main_region_StateInit_react(0);
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = main_region_StateInit_react(transitioned_before);
	}
	return transitioned_after;
}

sc::integer Statechart::main_region_StateIdle_react(const sc::integer transitioned_before) {
	/* The reactions of state StateIdle. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (Total_Reset_raised)
			{ 
				exseq_main_region_StateIdle();
				enseq_main_region_StateZero_default();
				transitioned_after = 0;
			}  else
			{
				if (Start_Config_raised)
				{ 
					exseq_main_region_StateIdle();
					enseq_main_region_StateConfig_default();
					transitioned_after = 0;
				}  else
				{
					if (Start_Operation_raised)
					{ 
						exseq_main_region_StateIdle();
						enseq_main_region_StateOperation_default();
						transitioned_after = 0;
					} 
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		} 
	} 
	return transitioned_after;
}

sc::integer Statechart::main_region_StateConfig_react(const sc::integer transitioned_before) {
	/* The reactions of state StateConfig. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (Save_Config_raised)
			{ 
				exseq_main_region_StateConfig();
				enseq_main_region_StateIdle_default();
				transitioned_after = 0;
			}  else
			{
				if (Restart_Config_raised)
				{ 
					exseq_main_region_StateConfig();
					enseq_main_region_StateConfig_default();
					transitioned_after = 0;
				}  else
				{
					if (Total_Reset_raised)
					{ 
						exseq_main_region_StateConfig();
						enseq_main_region_StateZero_default();
						transitioned_after = 0;
					} 
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		} 
	} 
	return transitioned_after;
}

sc::integer Statechart::main_region_StateOperation_react(const sc::integer transitioned_before) {
	/* The reactions of state StateOperation. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (Total_Reset_raised)
			{ 
				exseq_main_region_StateOperation();
				enseq_main_region_StateZero_default();
				transitioned_after = 0;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		} 
	} 
	return transitioned_after;
}

sc::integer Statechart::main_region_StateOperation_Operation_running_StateProcedure_1_react(const sc::integer transitioned_before) {
	/* The reactions of state StateProcedure_1. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state StateProcedure_1 */
		stateConfVector[0] = Statechart::State::main_region_StateOperation;
		exact_main_region_StateOperation_Operation_running_StateProcedure_1();
		/* 'default' enter sequence for state StateProcedure_2 */
		enact_main_region_StateOperation_Operation_running_StateProcedure_2();
		stateConfVector[0] = Statechart::State::main_region_StateOperation_Operation_running_StateProcedure_2;
		main_region_StateOperation_react(0);
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = main_region_StateOperation_react(transitioned_before);
	}
	return transitioned_after;
}

sc::integer Statechart::main_region_StateOperation_Operation_running_StateProcedure_2_react(const sc::integer transitioned_before) {
	/* The reactions of state StateProcedure_2. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state StateProcedure_2 */
		stateConfVector[0] = Statechart::State::main_region_StateOperation;
		exact_main_region_StateOperation_Operation_running_StateProcedure_2();
		/* 'default' enter sequence for state StateProcedure_3 */
		enact_main_region_StateOperation_Operation_running_StateProcedure_3();
		stateConfVector[0] = Statechart::State::main_region_StateOperation_Operation_running_StateProcedure_3;
		main_region_StateOperation_react(0);
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = main_region_StateOperation_react(transitioned_before);
	}
	return transitioned_after;
}

sc::integer Statechart::main_region_StateOperation_Operation_running_StateProcedure_3_react(const sc::integer transitioned_before) {
	/* The reactions of state StateProcedure_3. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state StateOperation */
		exseq_main_region_StateOperation_Operation_running();
		stateConfVector[0] = Statechart::State::NO_STATE;
		/* 'default' enter sequence for state StateComplete */
		enact_main_region_StateComplete();
		stateConfVector[0] = Statechart::State::main_region_StateComplete;
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = main_region_StateOperation_react(transitioned_before);
	}
	return transitioned_after;
}

sc::integer Statechart::main_region_StateOperation_Operation_running_StateProcedure_Start_react(const sc::integer transitioned_before) {
	/* The reactions of state StateProcedure_Start. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state StateProcedure_Start */
		stateConfVector[0] = Statechart::State::main_region_StateOperation;
		exact_main_region_StateOperation_Operation_running_StateProcedure_Start();
		/* 'default' enter sequence for state StateProcedure_1 */
		enact_main_region_StateOperation_Operation_running_StateProcedure_1();
		stateConfVector[0] = Statechart::State::main_region_StateOperation_Operation_running_StateProcedure_1;
		main_region_StateOperation_react(0);
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = main_region_StateOperation_react(transitioned_before);
	}
	return transitioned_after;
}

sc::integer Statechart::main_region_StateComplete_react(const sc::integer transitioned_before) {
	/* The reactions of state StateComplete. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (Reset_raised)
			{ 
				exseq_main_region_StateComplete();
				enseq_main_region_StateIdle_default();
				transitioned_after = 0;
			}  else
			{
				if (Total_Reset_raised)
				{ 
					exseq_main_region_StateComplete();
					enseq_main_region_StateZero_default();
					transitioned_after = 0;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		} 
	} 
	return transitioned_after;
}

void Statechart::clearInEvents() noexcept {
	Total_Reset_raised = false;
	Start_Config_raised = false;
	Save_Config_raised = false;
	Start_Operation_raised = false;
	Reset_raised = false;
	Restart_Config_raised = false;
}

void Statechart::microStep() {
	switch(stateConfVector[ 0 ])
	{
		case Statechart::State::main_region_StateZero :
		{
			main_region_StateZero_react(-1);
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_Start_init :
		{
			main_region_StateInit_Initialization_Progress_Start_init_react(-1);
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_End_init :
		{
			main_region_StateInit_Initialization_Progress_End_init_react(-1);
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_Init_Buzzer :
		{
			main_region_StateInit_Initialization_Progress_Init_Buzzer_react(-1);
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_Init_i2C :
		{
			main_region_StateInit_Initialization_Progress_Init_i2C_react(-1);
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_Init_Display :
		{
			main_region_StateInit_Initialization_Progress_Init_Display_react(-1);
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_Init_Mixer :
		{
			main_region_StateInit_Initialization_Progress_Init_Mixer_react(-1);
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_Init_Keypad :
		{
			main_region_StateInit_Initialization_Progress_Init_Keypad_react(-1);
			break;
		}
		case Statechart::State::main_region_StateInit_Initialization_Progress_Init_Heater :
		{
			main_region_StateInit_Initialization_Progress_Init_Heater_react(-1);
			break;
		}
		case Statechart::State::main_region_StateIdle :
		{
			main_region_StateIdle_react(-1);
			break;
		}
		case Statechart::State::main_region_StateConfig :
		{
			main_region_StateConfig_react(-1);
			break;
		}
		case Statechart::State::main_region_StateOperation_Operation_running_StateProcedure_1 :
		{
			main_region_StateOperation_Operation_running_StateProcedure_1_react(-1);
			break;
		}
		case Statechart::State::main_region_StateOperation_Operation_running_StateProcedure_2 :
		{
			main_region_StateOperation_Operation_running_StateProcedure_2_react(-1);
			break;
		}
		case Statechart::State::main_region_StateOperation_Operation_running_StateProcedure_3 :
		{
			main_region_StateOperation_Operation_running_StateProcedure_3_react(-1);
			break;
		}
		case Statechart::State::main_region_StateOperation_Operation_running_StateProcedure_Start :
		{
			main_region_StateOperation_Operation_running_StateProcedure_Start_react(-1);
			break;
		}
		case Statechart::State::main_region_StateComplete :
		{
			main_region_StateComplete_react(-1);
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

void Statechart::runCycle() {
	/* Performs a 'run to completion' step. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	dispatchEvent(getNextEvent());
	do
	{ 
		doCompletion = false;
		do
		{ 
			if (completed)
			{ 
				doCompletion = true;
			} 
			completed = false;
			microStep();
			clearInEvents();
			doCompletion = false;
		} while (completed);
	} while (dispatchEvent(getNextEvent()));
	isExecuting = false;
}

void Statechart::enter() {
	/* Activates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default enter sequence for statechart Statechart */
	enseq_main_region_default();
	doCompletion = false;
	do
	{ 
		if (completed)
		{ 
			doCompletion = true;
		} 
		completed = false;
		microStep();
		clearInEvents();
		doCompletion = false;
	} while (completed);
	isExecuting = false;
}

void Statechart::exit() {
	/* Deactivates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default exit sequence for statechart Statechart */
	exseq_main_region();
	stateConfVector[0] = Statechart::State::NO_STATE;
	isExecuting = false;
}

/* Can be used by the client code to trigger a run to completion step without raising an event. */
void Statechart::triggerWithoutEvent() {
	runCycle();
}


